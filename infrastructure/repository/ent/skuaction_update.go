// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/predicate"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skuaction"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skuconfig"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skustatuscode"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skutemplate"
)

// SkuActionUpdate is the builder for updating SkuAction entities.
type SkuActionUpdate struct {
	config
	hooks    []Hook
	mutation *SkuActionMutation
}

// Where adds a new predicate for the builder.
func (sau *SkuActionUpdate) Where(ps ...predicate.SkuAction) *SkuActionUpdate {
	sau.mutation.predicates = append(sau.mutation.predicates, ps...)
	return sau
}

// SetAppID sets the app_id field.
func (sau *SkuActionUpdate) SetAppID(s string) *SkuActionUpdate {
	sau.mutation.SetAppID(s)
	return sau
}

// SetSkuName sets the sku_name field.
func (sau *SkuActionUpdate) SetSkuName(s string) *SkuActionUpdate {
	sau.mutation.SetSkuName(s)
	return sau
}

// SetSkuNameCn sets the sku_name_cn field.
func (sau *SkuActionUpdate) SetSkuNameCn(s string) *SkuActionUpdate {
	sau.mutation.SetSkuNameCn(s)
	return sau
}

// SetAction sets the action field.
func (sau *SkuActionUpdate) SetAction(s string) *SkuActionUpdate {
	sau.mutation.SetAction(s)
	return sau
}

// SetStatus sets the status field.
func (sau *SkuActionUpdate) SetStatus(i int) *SkuActionUpdate {
	sau.mutation.ResetStatus()
	sau.mutation.SetStatus(i)
	return sau
}

// AddStatus adds i to status.
func (sau *SkuActionUpdate) AddStatus(i int) *SkuActionUpdate {
	sau.mutation.AddStatus(i)
	return sau
}

// SetUpdateAt sets the update_at field.
func (sau *SkuActionUpdate) SetUpdateAt(t time.Time) *SkuActionUpdate {
	sau.mutation.SetUpdateAt(t)
	return sau
}

// AddConfigIDs adds the config edge to SkuConfig by ids.
func (sau *SkuActionUpdate) AddConfigIDs(ids ...int) *SkuActionUpdate {
	sau.mutation.AddConfigIDs(ids...)
	return sau
}

// AddConfig adds the config edges to SkuConfig.
func (sau *SkuActionUpdate) AddConfig(s ...*SkuConfig) *SkuActionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sau.AddConfigIDs(ids...)
}

// AddTemplateIDs adds the template edge to SkuTemplate by ids.
func (sau *SkuActionUpdate) AddTemplateIDs(ids ...int) *SkuActionUpdate {
	sau.mutation.AddTemplateIDs(ids...)
	return sau
}

// AddTemplate adds the template edges to SkuTemplate.
func (sau *SkuActionUpdate) AddTemplate(s ...*SkuTemplate) *SkuActionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sau.AddTemplateIDs(ids...)
}

// AddStatusCodeIDs adds the status_code edge to SkuStatusCode by ids.
func (sau *SkuActionUpdate) AddStatusCodeIDs(ids ...int) *SkuActionUpdate {
	sau.mutation.AddStatusCodeIDs(ids...)
	return sau
}

// AddStatusCode adds the status_code edges to SkuStatusCode.
func (sau *SkuActionUpdate) AddStatusCode(s ...*SkuStatusCode) *SkuActionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sau.AddStatusCodeIDs(ids...)
}

// Mutation returns the SkuActionMutation object of the builder.
func (sau *SkuActionUpdate) Mutation() *SkuActionMutation {
	return sau.mutation
}

// ClearConfig clears all "config" edges to type SkuConfig.
func (sau *SkuActionUpdate) ClearConfig() *SkuActionUpdate {
	sau.mutation.ClearConfig()
	return sau
}

// RemoveConfigIDs removes the config edge to SkuConfig by ids.
func (sau *SkuActionUpdate) RemoveConfigIDs(ids ...int) *SkuActionUpdate {
	sau.mutation.RemoveConfigIDs(ids...)
	return sau
}

// RemoveConfig removes config edges to SkuConfig.
func (sau *SkuActionUpdate) RemoveConfig(s ...*SkuConfig) *SkuActionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sau.RemoveConfigIDs(ids...)
}

// ClearTemplate clears all "template" edges to type SkuTemplate.
func (sau *SkuActionUpdate) ClearTemplate() *SkuActionUpdate {
	sau.mutation.ClearTemplate()
	return sau
}

// RemoveTemplateIDs removes the template edge to SkuTemplate by ids.
func (sau *SkuActionUpdate) RemoveTemplateIDs(ids ...int) *SkuActionUpdate {
	sau.mutation.RemoveTemplateIDs(ids...)
	return sau
}

// RemoveTemplate removes template edges to SkuTemplate.
func (sau *SkuActionUpdate) RemoveTemplate(s ...*SkuTemplate) *SkuActionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sau.RemoveTemplateIDs(ids...)
}

// ClearStatusCode clears all "status_code" edges to type SkuStatusCode.
func (sau *SkuActionUpdate) ClearStatusCode() *SkuActionUpdate {
	sau.mutation.ClearStatusCode()
	return sau
}

// RemoveStatusCodeIDs removes the status_code edge to SkuStatusCode by ids.
func (sau *SkuActionUpdate) RemoveStatusCodeIDs(ids ...int) *SkuActionUpdate {
	sau.mutation.RemoveStatusCodeIDs(ids...)
	return sau
}

// RemoveStatusCode removes status_code edges to SkuStatusCode.
func (sau *SkuActionUpdate) RemoveStatusCode(s ...*SkuStatusCode) *SkuActionUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sau.RemoveStatusCodeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sau *SkuActionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	sau.defaults()
	if len(sau.hooks) == 0 {
		affected, err = sau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SkuActionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sau.mutation = mutation
			affected, err = sau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sau.hooks) - 1; i >= 0; i-- {
			mut = sau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sau *SkuActionUpdate) SaveX(ctx context.Context) int {
	affected, err := sau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sau *SkuActionUpdate) Exec(ctx context.Context) error {
	_, err := sau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sau *SkuActionUpdate) ExecX(ctx context.Context) {
	if err := sau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sau *SkuActionUpdate) defaults() {
	if _, ok := sau.mutation.UpdateAt(); !ok {
		v := skuaction.UpdateDefaultUpdateAt()
		sau.mutation.SetUpdateAt(v)
	}
}

func (sau *SkuActionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   skuaction.Table,
			Columns: skuaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: skuaction.FieldID,
			},
		},
	}
	if ps := sau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sau.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skuaction.FieldAppID,
		})
	}
	if value, ok := sau.mutation.SkuName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skuaction.FieldSkuName,
		})
	}
	if value, ok := sau.mutation.SkuNameCn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skuaction.FieldSkuNameCn,
		})
	}
	if value, ok := sau.mutation.Action(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skuaction.FieldAction,
		})
	}
	if value, ok := sau.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: skuaction.FieldStatus,
		})
	}
	if value, ok := sau.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: skuaction.FieldStatus,
		})
	}
	if value, ok := sau.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: skuaction.FieldUpdateAt,
		})
	}
	if sau.mutation.ConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skuaction.ConfigTable,
			Columns: []string{skuaction.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skuconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.RemovedConfigIDs(); len(nodes) > 0 && !sau.mutation.ConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skuaction.ConfigTable,
			Columns: []string{skuaction.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skuconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.ConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skuaction.ConfigTable,
			Columns: []string{skuaction.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skuconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sau.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skuaction.TemplateTable,
			Columns: []string{skuaction.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skutemplate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.RemovedTemplateIDs(); len(nodes) > 0 && !sau.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skuaction.TemplateTable,
			Columns: []string{skuaction.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skutemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skuaction.TemplateTable,
			Columns: []string{skuaction.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skutemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sau.mutation.StatusCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skuaction.StatusCodeTable,
			Columns: []string{skuaction.StatusCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skustatuscode.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.RemovedStatusCodeIDs(); len(nodes) > 0 && !sau.mutation.StatusCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skuaction.StatusCodeTable,
			Columns: []string{skuaction.StatusCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skustatuscode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.StatusCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skuaction.StatusCodeTable,
			Columns: []string{skuaction.StatusCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skustatuscode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{skuaction.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SkuActionUpdateOne is the builder for updating a single SkuAction entity.
type SkuActionUpdateOne struct {
	config
	hooks    []Hook
	mutation *SkuActionMutation
}

// SetAppID sets the app_id field.
func (sauo *SkuActionUpdateOne) SetAppID(s string) *SkuActionUpdateOne {
	sauo.mutation.SetAppID(s)
	return sauo
}

// SetSkuName sets the sku_name field.
func (sauo *SkuActionUpdateOne) SetSkuName(s string) *SkuActionUpdateOne {
	sauo.mutation.SetSkuName(s)
	return sauo
}

// SetSkuNameCn sets the sku_name_cn field.
func (sauo *SkuActionUpdateOne) SetSkuNameCn(s string) *SkuActionUpdateOne {
	sauo.mutation.SetSkuNameCn(s)
	return sauo
}

// SetAction sets the action field.
func (sauo *SkuActionUpdateOne) SetAction(s string) *SkuActionUpdateOne {
	sauo.mutation.SetAction(s)
	return sauo
}

// SetStatus sets the status field.
func (sauo *SkuActionUpdateOne) SetStatus(i int) *SkuActionUpdateOne {
	sauo.mutation.ResetStatus()
	sauo.mutation.SetStatus(i)
	return sauo
}

// AddStatus adds i to status.
func (sauo *SkuActionUpdateOne) AddStatus(i int) *SkuActionUpdateOne {
	sauo.mutation.AddStatus(i)
	return sauo
}

// SetUpdateAt sets the update_at field.
func (sauo *SkuActionUpdateOne) SetUpdateAt(t time.Time) *SkuActionUpdateOne {
	sauo.mutation.SetUpdateAt(t)
	return sauo
}

// AddConfigIDs adds the config edge to SkuConfig by ids.
func (sauo *SkuActionUpdateOne) AddConfigIDs(ids ...int) *SkuActionUpdateOne {
	sauo.mutation.AddConfigIDs(ids...)
	return sauo
}

// AddConfig adds the config edges to SkuConfig.
func (sauo *SkuActionUpdateOne) AddConfig(s ...*SkuConfig) *SkuActionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sauo.AddConfigIDs(ids...)
}

// AddTemplateIDs adds the template edge to SkuTemplate by ids.
func (sauo *SkuActionUpdateOne) AddTemplateIDs(ids ...int) *SkuActionUpdateOne {
	sauo.mutation.AddTemplateIDs(ids...)
	return sauo
}

// AddTemplate adds the template edges to SkuTemplate.
func (sauo *SkuActionUpdateOne) AddTemplate(s ...*SkuTemplate) *SkuActionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sauo.AddTemplateIDs(ids...)
}

// AddStatusCodeIDs adds the status_code edge to SkuStatusCode by ids.
func (sauo *SkuActionUpdateOne) AddStatusCodeIDs(ids ...int) *SkuActionUpdateOne {
	sauo.mutation.AddStatusCodeIDs(ids...)
	return sauo
}

// AddStatusCode adds the status_code edges to SkuStatusCode.
func (sauo *SkuActionUpdateOne) AddStatusCode(s ...*SkuStatusCode) *SkuActionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sauo.AddStatusCodeIDs(ids...)
}

// Mutation returns the SkuActionMutation object of the builder.
func (sauo *SkuActionUpdateOne) Mutation() *SkuActionMutation {
	return sauo.mutation
}

// ClearConfig clears all "config" edges to type SkuConfig.
func (sauo *SkuActionUpdateOne) ClearConfig() *SkuActionUpdateOne {
	sauo.mutation.ClearConfig()
	return sauo
}

// RemoveConfigIDs removes the config edge to SkuConfig by ids.
func (sauo *SkuActionUpdateOne) RemoveConfigIDs(ids ...int) *SkuActionUpdateOne {
	sauo.mutation.RemoveConfigIDs(ids...)
	return sauo
}

// RemoveConfig removes config edges to SkuConfig.
func (sauo *SkuActionUpdateOne) RemoveConfig(s ...*SkuConfig) *SkuActionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sauo.RemoveConfigIDs(ids...)
}

// ClearTemplate clears all "template" edges to type SkuTemplate.
func (sauo *SkuActionUpdateOne) ClearTemplate() *SkuActionUpdateOne {
	sauo.mutation.ClearTemplate()
	return sauo
}

// RemoveTemplateIDs removes the template edge to SkuTemplate by ids.
func (sauo *SkuActionUpdateOne) RemoveTemplateIDs(ids ...int) *SkuActionUpdateOne {
	sauo.mutation.RemoveTemplateIDs(ids...)
	return sauo
}

// RemoveTemplate removes template edges to SkuTemplate.
func (sauo *SkuActionUpdateOne) RemoveTemplate(s ...*SkuTemplate) *SkuActionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sauo.RemoveTemplateIDs(ids...)
}

// ClearStatusCode clears all "status_code" edges to type SkuStatusCode.
func (sauo *SkuActionUpdateOne) ClearStatusCode() *SkuActionUpdateOne {
	sauo.mutation.ClearStatusCode()
	return sauo
}

// RemoveStatusCodeIDs removes the status_code edge to SkuStatusCode by ids.
func (sauo *SkuActionUpdateOne) RemoveStatusCodeIDs(ids ...int) *SkuActionUpdateOne {
	sauo.mutation.RemoveStatusCodeIDs(ids...)
	return sauo
}

// RemoveStatusCode removes status_code edges to SkuStatusCode.
func (sauo *SkuActionUpdateOne) RemoveStatusCode(s ...*SkuStatusCode) *SkuActionUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sauo.RemoveStatusCodeIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (sauo *SkuActionUpdateOne) Save(ctx context.Context) (*SkuAction, error) {
	var (
		err  error
		node *SkuAction
	)
	sauo.defaults()
	if len(sauo.hooks) == 0 {
		node, err = sauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SkuActionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sauo.mutation = mutation
			node, err = sauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sauo.hooks) - 1; i >= 0; i-- {
			mut = sauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sauo *SkuActionUpdateOne) SaveX(ctx context.Context) *SkuAction {
	node, err := sauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sauo *SkuActionUpdateOne) Exec(ctx context.Context) error {
	_, err := sauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sauo *SkuActionUpdateOne) ExecX(ctx context.Context) {
	if err := sauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sauo *SkuActionUpdateOne) defaults() {
	if _, ok := sauo.mutation.UpdateAt(); !ok {
		v := skuaction.UpdateDefaultUpdateAt()
		sauo.mutation.SetUpdateAt(v)
	}
}

func (sauo *SkuActionUpdateOne) sqlSave(ctx context.Context) (_node *SkuAction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   skuaction.Table,
			Columns: skuaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: skuaction.FieldID,
			},
		},
	}
	id, ok := sauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SkuAction.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := sauo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skuaction.FieldAppID,
		})
	}
	if value, ok := sauo.mutation.SkuName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skuaction.FieldSkuName,
		})
	}
	if value, ok := sauo.mutation.SkuNameCn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skuaction.FieldSkuNameCn,
		})
	}
	if value, ok := sauo.mutation.Action(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skuaction.FieldAction,
		})
	}
	if value, ok := sauo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: skuaction.FieldStatus,
		})
	}
	if value, ok := sauo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: skuaction.FieldStatus,
		})
	}
	if value, ok := sauo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: skuaction.FieldUpdateAt,
		})
	}
	if sauo.mutation.ConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skuaction.ConfigTable,
			Columns: []string{skuaction.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skuconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.RemovedConfigIDs(); len(nodes) > 0 && !sauo.mutation.ConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skuaction.ConfigTable,
			Columns: []string{skuaction.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skuconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.ConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skuaction.ConfigTable,
			Columns: []string{skuaction.ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skuconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sauo.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skuaction.TemplateTable,
			Columns: []string{skuaction.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skutemplate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.RemovedTemplateIDs(); len(nodes) > 0 && !sauo.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skuaction.TemplateTable,
			Columns: []string{skuaction.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skutemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skuaction.TemplateTable,
			Columns: []string{skuaction.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skutemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sauo.mutation.StatusCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skuaction.StatusCodeTable,
			Columns: []string{skuaction.StatusCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skustatuscode.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.RemovedStatusCodeIDs(); len(nodes) > 0 && !sauo.mutation.StatusCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skuaction.StatusCodeTable,
			Columns: []string{skuaction.StatusCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skustatuscode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.StatusCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   skuaction.StatusCodeTable,
			Columns: []string{skuaction.StatusCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skustatuscode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SkuAction{config: sauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, sauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{skuaction.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
