// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skuaction"
)

// SkuAction is the model entity for the SkuAction schema.
type SkuAction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID string `json:"app_id,omitempty"`
	// SkuName holds the value of the "sku_name" field.
	SkuName string `json:"sku_name,omitempty"`
	// SkuNameCn holds the value of the "sku_name_cn" field.
	SkuNameCn string `json:"sku_name_cn,omitempty"`
	// Action holds the value of the "action" field.
	Action string `json:"action,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt time.Time `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt time.Time `json:"update_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SkuActionQuery when eager-loading is set.
	Edges SkuActionEdges `json:"edges"`
}

// SkuActionEdges holds the relations/edges for other nodes in the graph.
type SkuActionEdges struct {
	// Config holds the value of the config edge.
	Config []*SkuConfig
	// Template holds the value of the template edge.
	Template []*SkuTemplate
	// StatusCode holds the value of the status_code edge.
	StatusCode []*SkuStatusCode
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ConfigOrErr returns the Config value or an error if the edge
// was not loaded in eager-loading.
func (e SkuActionEdges) ConfigOrErr() ([]*SkuConfig, error) {
	if e.loadedTypes[0] {
		return e.Config, nil
	}
	return nil, &NotLoadedError{edge: "config"}
}

// TemplateOrErr returns the Template value or an error if the edge
// was not loaded in eager-loading.
func (e SkuActionEdges) TemplateOrErr() ([]*SkuTemplate, error) {
	if e.loadedTypes[1] {
		return e.Template, nil
	}
	return nil, &NotLoadedError{edge: "template"}
}

// StatusCodeOrErr returns the StatusCode value or an error if the edge
// was not loaded in eager-loading.
func (e SkuActionEdges) StatusCodeOrErr() ([]*SkuStatusCode, error) {
	if e.loadedTypes[2] {
		return e.StatusCode, nil
	}
	return nil, &NotLoadedError{edge: "status_code"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SkuAction) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // app_id
		&sql.NullString{}, // sku_name
		&sql.NullString{}, // sku_name_cn
		&sql.NullString{}, // action
		&sql.NullInt64{},  // status
		&sql.NullTime{},   // create_at
		&sql.NullTime{},   // update_at
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SkuAction fields.
func (sa *SkuAction) assignValues(values ...interface{}) error {
	if m, n := len(values), len(skuaction.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	sa.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field app_id", values[0])
	} else if value.Valid {
		sa.AppID = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field sku_name", values[1])
	} else if value.Valid {
		sa.SkuName = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field sku_name_cn", values[2])
	} else if value.Valid {
		sa.SkuNameCn = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field action", values[3])
	} else if value.Valid {
		sa.Action = value.String
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[4])
	} else if value.Valid {
		sa.Status = int(value.Int64)
	}
	if value, ok := values[5].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_at", values[5])
	} else if value.Valid {
		sa.CreateAt = value.Time
	}
	if value, ok := values[6].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_at", values[6])
	} else if value.Valid {
		sa.UpdateAt = value.Time
	}
	return nil
}

// QueryConfig queries the config edge of the SkuAction.
func (sa *SkuAction) QueryConfig() *SkuConfigQuery {
	return (&SkuActionClient{config: sa.config}).QueryConfig(sa)
}

// QueryTemplate queries the template edge of the SkuAction.
func (sa *SkuAction) QueryTemplate() *SkuTemplateQuery {
	return (&SkuActionClient{config: sa.config}).QueryTemplate(sa)
}

// QueryStatusCode queries the status_code edge of the SkuAction.
func (sa *SkuAction) QueryStatusCode() *SkuStatusCodeQuery {
	return (&SkuActionClient{config: sa.config}).QueryStatusCode(sa)
}

// Update returns a builder for updating this SkuAction.
// Note that, you need to call SkuAction.Unwrap() before calling this method, if this SkuAction
// was returned from a transaction, and the transaction was committed or rolled back.
func (sa *SkuAction) Update() *SkuActionUpdateOne {
	return (&SkuActionClient{config: sa.config}).UpdateOne(sa)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (sa *SkuAction) Unwrap() *SkuAction {
	tx, ok := sa.config.driver.(*txDriver)
	if !ok {
		panic("ent: SkuAction is not a transactional entity")
	}
	sa.config.driver = tx.drv
	return sa
}

// String implements the fmt.Stringer.
func (sa *SkuAction) String() string {
	var builder strings.Builder
	builder.WriteString("SkuAction(")
	builder.WriteString(fmt.Sprintf("id=%v", sa.ID))
	builder.WriteString(", app_id=")
	builder.WriteString(sa.AppID)
	builder.WriteString(", sku_name=")
	builder.WriteString(sa.SkuName)
	builder.WriteString(", sku_name_cn=")
	builder.WriteString(sa.SkuNameCn)
	builder.WriteString(", action=")
	builder.WriteString(sa.Action)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", sa.Status))
	builder.WriteString(", create_at=")
	builder.WriteString(sa.CreateAt.Format(time.ANSIC))
	builder.WriteString(", update_at=")
	builder.WriteString(sa.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SkuActions is a parsable slice of SkuAction.
type SkuActions []*SkuAction

func (sa SkuActions) config(cfg config) {
	for _i := range sa {
		sa[_i].config = cfg
	}
}
