// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/predicate"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skuaction"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skustatuscode"
)

// SkuStatusCodeUpdate is the builder for updating SkuStatusCode entities.
type SkuStatusCodeUpdate struct {
	config
	hooks    []Hook
	mutation *SkuStatusCodeMutation
}

// Where adds a new predicate for the builder.
func (sscu *SkuStatusCodeUpdate) Where(ps ...predicate.SkuStatusCode) *SkuStatusCodeUpdate {
	sscu.mutation.predicates = append(sscu.mutation.predicates, ps...)
	return sscu
}

// SetInsuranceCode sets the insurance_code field.
func (sscu *SkuStatusCodeUpdate) SetInsuranceCode(s string) *SkuStatusCodeUpdate {
	sscu.mutation.SetInsuranceCode(s)
	return sscu
}

// SetReflectCode sets the reflect_code field.
func (sscu *SkuStatusCodeUpdate) SetReflectCode(s string) *SkuStatusCodeUpdate {
	sscu.mutation.SetReflectCode(s)
	return sscu
}

// SetStatus sets the status field.
func (sscu *SkuStatusCodeUpdate) SetStatus(i int) *SkuStatusCodeUpdate {
	sscu.mutation.ResetStatus()
	sscu.mutation.SetStatus(i)
	return sscu
}

// AddStatus adds i to status.
func (sscu *SkuStatusCodeUpdate) AddStatus(i int) *SkuStatusCodeUpdate {
	sscu.mutation.AddStatus(i)
	return sscu
}

// SetUpdateAt sets the update_at field.
func (sscu *SkuStatusCodeUpdate) SetUpdateAt(t time.Time) *SkuStatusCodeUpdate {
	sscu.mutation.SetUpdateAt(t)
	return sscu
}

// SetActionID sets the action edge to SkuAction by id.
func (sscu *SkuStatusCodeUpdate) SetActionID(id int) *SkuStatusCodeUpdate {
	sscu.mutation.SetActionID(id)
	return sscu
}

// SetNillableActionID sets the action edge to SkuAction by id if the given value is not nil.
func (sscu *SkuStatusCodeUpdate) SetNillableActionID(id *int) *SkuStatusCodeUpdate {
	if id != nil {
		sscu = sscu.SetActionID(*id)
	}
	return sscu
}

// SetAction sets the action edge to SkuAction.
func (sscu *SkuStatusCodeUpdate) SetAction(s *SkuAction) *SkuStatusCodeUpdate {
	return sscu.SetActionID(s.ID)
}

// Mutation returns the SkuStatusCodeMutation object of the builder.
func (sscu *SkuStatusCodeUpdate) Mutation() *SkuStatusCodeMutation {
	return sscu.mutation
}

// ClearAction clears the "action" edge to type SkuAction.
func (sscu *SkuStatusCodeUpdate) ClearAction() *SkuStatusCodeUpdate {
	sscu.mutation.ClearAction()
	return sscu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sscu *SkuStatusCodeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	sscu.defaults()
	if len(sscu.hooks) == 0 {
		affected, err = sscu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SkuStatusCodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sscu.mutation = mutation
			affected, err = sscu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sscu.hooks) - 1; i >= 0; i-- {
			mut = sscu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sscu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sscu *SkuStatusCodeUpdate) SaveX(ctx context.Context) int {
	affected, err := sscu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sscu *SkuStatusCodeUpdate) Exec(ctx context.Context) error {
	_, err := sscu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sscu *SkuStatusCodeUpdate) ExecX(ctx context.Context) {
	if err := sscu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sscu *SkuStatusCodeUpdate) defaults() {
	if _, ok := sscu.mutation.UpdateAt(); !ok {
		v := skustatuscode.UpdateDefaultUpdateAt()
		sscu.mutation.SetUpdateAt(v)
	}
}

func (sscu *SkuStatusCodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   skustatuscode.Table,
			Columns: skustatuscode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: skustatuscode.FieldID,
			},
		},
	}
	if ps := sscu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sscu.mutation.InsuranceCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skustatuscode.FieldInsuranceCode,
		})
	}
	if value, ok := sscu.mutation.ReflectCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skustatuscode.FieldReflectCode,
		})
	}
	if value, ok := sscu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: skustatuscode.FieldStatus,
		})
	}
	if value, ok := sscu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: skustatuscode.FieldStatus,
		})
	}
	if value, ok := sscu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: skustatuscode.FieldUpdateAt,
		})
	}
	if sscu.mutation.ActionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skustatuscode.ActionTable,
			Columns: []string{skustatuscode.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skuaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sscu.mutation.ActionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skustatuscode.ActionTable,
			Columns: []string{skustatuscode.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skuaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sscu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{skustatuscode.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SkuStatusCodeUpdateOne is the builder for updating a single SkuStatusCode entity.
type SkuStatusCodeUpdateOne struct {
	config
	hooks    []Hook
	mutation *SkuStatusCodeMutation
}

// SetInsuranceCode sets the insurance_code field.
func (sscuo *SkuStatusCodeUpdateOne) SetInsuranceCode(s string) *SkuStatusCodeUpdateOne {
	sscuo.mutation.SetInsuranceCode(s)
	return sscuo
}

// SetReflectCode sets the reflect_code field.
func (sscuo *SkuStatusCodeUpdateOne) SetReflectCode(s string) *SkuStatusCodeUpdateOne {
	sscuo.mutation.SetReflectCode(s)
	return sscuo
}

// SetStatus sets the status field.
func (sscuo *SkuStatusCodeUpdateOne) SetStatus(i int) *SkuStatusCodeUpdateOne {
	sscuo.mutation.ResetStatus()
	sscuo.mutation.SetStatus(i)
	return sscuo
}

// AddStatus adds i to status.
func (sscuo *SkuStatusCodeUpdateOne) AddStatus(i int) *SkuStatusCodeUpdateOne {
	sscuo.mutation.AddStatus(i)
	return sscuo
}

// SetUpdateAt sets the update_at field.
func (sscuo *SkuStatusCodeUpdateOne) SetUpdateAt(t time.Time) *SkuStatusCodeUpdateOne {
	sscuo.mutation.SetUpdateAt(t)
	return sscuo
}

// SetActionID sets the action edge to SkuAction by id.
func (sscuo *SkuStatusCodeUpdateOne) SetActionID(id int) *SkuStatusCodeUpdateOne {
	sscuo.mutation.SetActionID(id)
	return sscuo
}

// SetNillableActionID sets the action edge to SkuAction by id if the given value is not nil.
func (sscuo *SkuStatusCodeUpdateOne) SetNillableActionID(id *int) *SkuStatusCodeUpdateOne {
	if id != nil {
		sscuo = sscuo.SetActionID(*id)
	}
	return sscuo
}

// SetAction sets the action edge to SkuAction.
func (sscuo *SkuStatusCodeUpdateOne) SetAction(s *SkuAction) *SkuStatusCodeUpdateOne {
	return sscuo.SetActionID(s.ID)
}

// Mutation returns the SkuStatusCodeMutation object of the builder.
func (sscuo *SkuStatusCodeUpdateOne) Mutation() *SkuStatusCodeMutation {
	return sscuo.mutation
}

// ClearAction clears the "action" edge to type SkuAction.
func (sscuo *SkuStatusCodeUpdateOne) ClearAction() *SkuStatusCodeUpdateOne {
	sscuo.mutation.ClearAction()
	return sscuo
}

// Save executes the query and returns the updated entity.
func (sscuo *SkuStatusCodeUpdateOne) Save(ctx context.Context) (*SkuStatusCode, error) {
	var (
		err  error
		node *SkuStatusCode
	)
	sscuo.defaults()
	if len(sscuo.hooks) == 0 {
		node, err = sscuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SkuStatusCodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sscuo.mutation = mutation
			node, err = sscuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sscuo.hooks) - 1; i >= 0; i-- {
			mut = sscuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sscuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sscuo *SkuStatusCodeUpdateOne) SaveX(ctx context.Context) *SkuStatusCode {
	node, err := sscuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sscuo *SkuStatusCodeUpdateOne) Exec(ctx context.Context) error {
	_, err := sscuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sscuo *SkuStatusCodeUpdateOne) ExecX(ctx context.Context) {
	if err := sscuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sscuo *SkuStatusCodeUpdateOne) defaults() {
	if _, ok := sscuo.mutation.UpdateAt(); !ok {
		v := skustatuscode.UpdateDefaultUpdateAt()
		sscuo.mutation.SetUpdateAt(v)
	}
}

func (sscuo *SkuStatusCodeUpdateOne) sqlSave(ctx context.Context) (_node *SkuStatusCode, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   skustatuscode.Table,
			Columns: skustatuscode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: skustatuscode.FieldID,
			},
		},
	}
	id, ok := sscuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SkuStatusCode.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := sscuo.mutation.InsuranceCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skustatuscode.FieldInsuranceCode,
		})
	}
	if value, ok := sscuo.mutation.ReflectCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skustatuscode.FieldReflectCode,
		})
	}
	if value, ok := sscuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: skustatuscode.FieldStatus,
		})
	}
	if value, ok := sscuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: skustatuscode.FieldStatus,
		})
	}
	if value, ok := sscuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: skustatuscode.FieldUpdateAt,
		})
	}
	if sscuo.mutation.ActionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skustatuscode.ActionTable,
			Columns: []string{skustatuscode.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skuaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sscuo.mutation.ActionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skustatuscode.ActionTable,
			Columns: []string{skustatuscode.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skuaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SkuStatusCode{config: sscuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, sscuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{skustatuscode.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
