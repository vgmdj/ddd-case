// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skuaction"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skuconfig"
)

// SkuConfigCreate is the builder for creating a SkuConfig entity.
type SkuConfigCreate struct {
	config
	mutation *SkuConfigMutation
	hooks    []Hook
}

// SetConfig sets the config field.
func (scc *SkuConfigCreate) SetConfig(s string) *SkuConfigCreate {
	scc.mutation.SetConfig(s)
	return scc
}

// SetStatus sets the status field.
func (scc *SkuConfigCreate) SetStatus(i int) *SkuConfigCreate {
	scc.mutation.SetStatus(i)
	return scc
}

// SetCreateAt sets the create_at field.
func (scc *SkuConfigCreate) SetCreateAt(t time.Time) *SkuConfigCreate {
	scc.mutation.SetCreateAt(t)
	return scc
}

// SetNillableCreateAt sets the create_at field if the given value is not nil.
func (scc *SkuConfigCreate) SetNillableCreateAt(t *time.Time) *SkuConfigCreate {
	if t != nil {
		scc.SetCreateAt(*t)
	}
	return scc
}

// SetUpdateAt sets the update_at field.
func (scc *SkuConfigCreate) SetUpdateAt(t time.Time) *SkuConfigCreate {
	scc.mutation.SetUpdateAt(t)
	return scc
}

// SetNillableUpdateAt sets the update_at field if the given value is not nil.
func (scc *SkuConfigCreate) SetNillableUpdateAt(t *time.Time) *SkuConfigCreate {
	if t != nil {
		scc.SetUpdateAt(*t)
	}
	return scc
}

// SetActionID sets the action edge to SkuAction by id.
func (scc *SkuConfigCreate) SetActionID(id int) *SkuConfigCreate {
	scc.mutation.SetActionID(id)
	return scc
}

// SetNillableActionID sets the action edge to SkuAction by id if the given value is not nil.
func (scc *SkuConfigCreate) SetNillableActionID(id *int) *SkuConfigCreate {
	if id != nil {
		scc = scc.SetActionID(*id)
	}
	return scc
}

// SetAction sets the action edge to SkuAction.
func (scc *SkuConfigCreate) SetAction(s *SkuAction) *SkuConfigCreate {
	return scc.SetActionID(s.ID)
}

// Mutation returns the SkuConfigMutation object of the builder.
func (scc *SkuConfigCreate) Mutation() *SkuConfigMutation {
	return scc.mutation
}

// Save creates the SkuConfig in the database.
func (scc *SkuConfigCreate) Save(ctx context.Context) (*SkuConfig, error) {
	var (
		err  error
		node *SkuConfig
	)
	scc.defaults()
	if len(scc.hooks) == 0 {
		if err = scc.check(); err != nil {
			return nil, err
		}
		node, err = scc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SkuConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = scc.check(); err != nil {
				return nil, err
			}
			scc.mutation = mutation
			node, err = scc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(scc.hooks) - 1; i >= 0; i-- {
			mut = scc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, scc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (scc *SkuConfigCreate) SaveX(ctx context.Context) *SkuConfig {
	v, err := scc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (scc *SkuConfigCreate) defaults() {
	if _, ok := scc.mutation.CreateAt(); !ok {
		v := skuconfig.DefaultCreateAt()
		scc.mutation.SetCreateAt(v)
	}
	if _, ok := scc.mutation.UpdateAt(); !ok {
		v := skuconfig.DefaultUpdateAt()
		scc.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scc *SkuConfigCreate) check() error {
	if _, ok := scc.mutation.Config(); !ok {
		return &ValidationError{Name: "config", err: errors.New("ent: missing required field \"config\"")}
	}
	if _, ok := scc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if _, ok := scc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New("ent: missing required field \"create_at\"")}
	}
	if _, ok := scc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New("ent: missing required field \"update_at\"")}
	}
	return nil
}

func (scc *SkuConfigCreate) sqlSave(ctx context.Context) (*SkuConfig, error) {
	_node, _spec := scc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (scc *SkuConfigCreate) createSpec() (*SkuConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &SkuConfig{config: scc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: skuconfig.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: skuconfig.FieldID,
			},
		}
	)
	if value, ok := scc.mutation.Config(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skuconfig.FieldConfig,
		})
		_node.Config = value
	}
	if value, ok := scc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: skuconfig.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := scc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: skuconfig.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := scc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: skuconfig.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if nodes := scc.mutation.ActionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skuconfig.ActionTable,
			Columns: []string{skuconfig.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skuaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SkuConfigCreateBulk is the builder for creating a bulk of SkuConfig entities.
type SkuConfigCreateBulk struct {
	config
	builders []*SkuConfigCreate
}

// Save creates the SkuConfig entities in the database.
func (sccb *SkuConfigCreateBulk) Save(ctx context.Context) ([]*SkuConfig, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sccb.builders))
	nodes := make([]*SkuConfig, len(sccb.builders))
	mutators := make([]Mutator, len(sccb.builders))
	for i := range sccb.builders {
		func(i int, root context.Context) {
			builder := sccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SkuConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (sccb *SkuConfigCreateBulk) SaveX(ctx context.Context) []*SkuConfig {
	v, err := sccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
