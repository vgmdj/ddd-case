// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skuaction"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skustatuscode"
)

// SkuStatusCodeCreate is the builder for creating a SkuStatusCode entity.
type SkuStatusCodeCreate struct {
	config
	mutation *SkuStatusCodeMutation
	hooks    []Hook
}

// SetInsuranceCode sets the insurance_code field.
func (sscc *SkuStatusCodeCreate) SetInsuranceCode(s string) *SkuStatusCodeCreate {
	sscc.mutation.SetInsuranceCode(s)
	return sscc
}

// SetReflectCode sets the reflect_code field.
func (sscc *SkuStatusCodeCreate) SetReflectCode(s string) *SkuStatusCodeCreate {
	sscc.mutation.SetReflectCode(s)
	return sscc
}

// SetStatus sets the status field.
func (sscc *SkuStatusCodeCreate) SetStatus(i int) *SkuStatusCodeCreate {
	sscc.mutation.SetStatus(i)
	return sscc
}

// SetCreateAt sets the create_at field.
func (sscc *SkuStatusCodeCreate) SetCreateAt(t time.Time) *SkuStatusCodeCreate {
	sscc.mutation.SetCreateAt(t)
	return sscc
}

// SetNillableCreateAt sets the create_at field if the given value is not nil.
func (sscc *SkuStatusCodeCreate) SetNillableCreateAt(t *time.Time) *SkuStatusCodeCreate {
	if t != nil {
		sscc.SetCreateAt(*t)
	}
	return sscc
}

// SetUpdateAt sets the update_at field.
func (sscc *SkuStatusCodeCreate) SetUpdateAt(t time.Time) *SkuStatusCodeCreate {
	sscc.mutation.SetUpdateAt(t)
	return sscc
}

// SetNillableUpdateAt sets the update_at field if the given value is not nil.
func (sscc *SkuStatusCodeCreate) SetNillableUpdateAt(t *time.Time) *SkuStatusCodeCreate {
	if t != nil {
		sscc.SetUpdateAt(*t)
	}
	return sscc
}

// SetActionID sets the action edge to SkuAction by id.
func (sscc *SkuStatusCodeCreate) SetActionID(id int) *SkuStatusCodeCreate {
	sscc.mutation.SetActionID(id)
	return sscc
}

// SetNillableActionID sets the action edge to SkuAction by id if the given value is not nil.
func (sscc *SkuStatusCodeCreate) SetNillableActionID(id *int) *SkuStatusCodeCreate {
	if id != nil {
		sscc = sscc.SetActionID(*id)
	}
	return sscc
}

// SetAction sets the action edge to SkuAction.
func (sscc *SkuStatusCodeCreate) SetAction(s *SkuAction) *SkuStatusCodeCreate {
	return sscc.SetActionID(s.ID)
}

// Mutation returns the SkuStatusCodeMutation object of the builder.
func (sscc *SkuStatusCodeCreate) Mutation() *SkuStatusCodeMutation {
	return sscc.mutation
}

// Save creates the SkuStatusCode in the database.
func (sscc *SkuStatusCodeCreate) Save(ctx context.Context) (*SkuStatusCode, error) {
	var (
		err  error
		node *SkuStatusCode
	)
	sscc.defaults()
	if len(sscc.hooks) == 0 {
		if err = sscc.check(); err != nil {
			return nil, err
		}
		node, err = sscc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SkuStatusCodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sscc.check(); err != nil {
				return nil, err
			}
			sscc.mutation = mutation
			node, err = sscc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sscc.hooks) - 1; i >= 0; i-- {
			mut = sscc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sscc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sscc *SkuStatusCodeCreate) SaveX(ctx context.Context) *SkuStatusCode {
	v, err := sscc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (sscc *SkuStatusCodeCreate) defaults() {
	if _, ok := sscc.mutation.CreateAt(); !ok {
		v := skustatuscode.DefaultCreateAt()
		sscc.mutation.SetCreateAt(v)
	}
	if _, ok := sscc.mutation.UpdateAt(); !ok {
		v := skustatuscode.DefaultUpdateAt()
		sscc.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sscc *SkuStatusCodeCreate) check() error {
	if _, ok := sscc.mutation.InsuranceCode(); !ok {
		return &ValidationError{Name: "insurance_code", err: errors.New("ent: missing required field \"insurance_code\"")}
	}
	if _, ok := sscc.mutation.ReflectCode(); !ok {
		return &ValidationError{Name: "reflect_code", err: errors.New("ent: missing required field \"reflect_code\"")}
	}
	if _, ok := sscc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if _, ok := sscc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New("ent: missing required field \"create_at\"")}
	}
	if _, ok := sscc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New("ent: missing required field \"update_at\"")}
	}
	return nil
}

func (sscc *SkuStatusCodeCreate) sqlSave(ctx context.Context) (*SkuStatusCode, error) {
	_node, _spec := sscc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sscc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sscc *SkuStatusCodeCreate) createSpec() (*SkuStatusCode, *sqlgraph.CreateSpec) {
	var (
		_node = &SkuStatusCode{config: sscc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: skustatuscode.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: skustatuscode.FieldID,
			},
		}
	)
	if value, ok := sscc.mutation.InsuranceCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skustatuscode.FieldInsuranceCode,
		})
		_node.InsuranceCode = value
	}
	if value, ok := sscc.mutation.ReflectCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skustatuscode.FieldReflectCode,
		})
		_node.ReflectCode = value
	}
	if value, ok := sscc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: skustatuscode.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := sscc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: skustatuscode.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := sscc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: skustatuscode.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if nodes := sscc.mutation.ActionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skustatuscode.ActionTable,
			Columns: []string{skustatuscode.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skuaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SkuStatusCodeCreateBulk is the builder for creating a bulk of SkuStatusCode entities.
type SkuStatusCodeCreateBulk struct {
	config
	builders []*SkuStatusCodeCreate
}

// Save creates the SkuStatusCode entities in the database.
func (ssccb *SkuStatusCodeCreateBulk) Save(ctx context.Context) ([]*SkuStatusCode, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ssccb.builders))
	nodes := make([]*SkuStatusCode, len(ssccb.builders))
	mutators := make([]Mutator, len(ssccb.builders))
	for i := range ssccb.builders {
		func(i int, root context.Context) {
			builder := ssccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SkuStatusCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ssccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ssccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ssccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ssccb *SkuStatusCodeCreateBulk) SaveX(ctx context.Context) []*SkuStatusCode {
	v, err := ssccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
