// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/migrate"

	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skuaction"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skuconfig"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skustatuscode"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skutemplate"

	"github.com/facebook/ent/dialect"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// SkuAction is the client for interacting with the SkuAction builders.
	SkuAction *SkuActionClient
	// SkuConfig is the client for interacting with the SkuConfig builders.
	SkuConfig *SkuConfigClient
	// SkuStatusCode is the client for interacting with the SkuStatusCode builders.
	SkuStatusCode *SkuStatusCodeClient
	// SkuTemplate is the client for interacting with the SkuTemplate builders.
	SkuTemplate *SkuTemplateClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.SkuAction = NewSkuActionClient(c.config)
	c.SkuConfig = NewSkuConfigClient(c.config)
	c.SkuStatusCode = NewSkuStatusCodeClient(c.config)
	c.SkuTemplate = NewSkuTemplateClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		SkuAction:     NewSkuActionClient(cfg),
		SkuConfig:     NewSkuConfigClient(cfg),
		SkuStatusCode: NewSkuStatusCodeClient(cfg),
		SkuTemplate:   NewSkuTemplateClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:        cfg,
		SkuAction:     NewSkuActionClient(cfg),
		SkuConfig:     NewSkuConfigClient(cfg),
		SkuStatusCode: NewSkuStatusCodeClient(cfg),
		SkuTemplate:   NewSkuTemplateClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		SkuAction.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.SkuAction.Use(hooks...)
	c.SkuConfig.Use(hooks...)
	c.SkuStatusCode.Use(hooks...)
	c.SkuTemplate.Use(hooks...)
}

// SkuActionClient is a client for the SkuAction schema.
type SkuActionClient struct {
	config
}

// NewSkuActionClient returns a client for the SkuAction from the given config.
func NewSkuActionClient(c config) *SkuActionClient {
	return &SkuActionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `skuaction.Hooks(f(g(h())))`.
func (c *SkuActionClient) Use(hooks ...Hook) {
	c.hooks.SkuAction = append(c.hooks.SkuAction, hooks...)
}

// Create returns a create builder for SkuAction.
func (c *SkuActionClient) Create() *SkuActionCreate {
	mutation := newSkuActionMutation(c.config, OpCreate)
	return &SkuActionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SkuAction entities.
func (c *SkuActionClient) CreateBulk(builders ...*SkuActionCreate) *SkuActionCreateBulk {
	return &SkuActionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SkuAction.
func (c *SkuActionClient) Update() *SkuActionUpdate {
	mutation := newSkuActionMutation(c.config, OpUpdate)
	return &SkuActionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SkuActionClient) UpdateOne(sa *SkuAction) *SkuActionUpdateOne {
	mutation := newSkuActionMutation(c.config, OpUpdateOne, withSkuAction(sa))
	return &SkuActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SkuActionClient) UpdateOneID(id int) *SkuActionUpdateOne {
	mutation := newSkuActionMutation(c.config, OpUpdateOne, withSkuActionID(id))
	return &SkuActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SkuAction.
func (c *SkuActionClient) Delete() *SkuActionDelete {
	mutation := newSkuActionMutation(c.config, OpDelete)
	return &SkuActionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SkuActionClient) DeleteOne(sa *SkuAction) *SkuActionDeleteOne {
	return c.DeleteOneID(sa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SkuActionClient) DeleteOneID(id int) *SkuActionDeleteOne {
	builder := c.Delete().Where(skuaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SkuActionDeleteOne{builder}
}

// Query returns a query builder for SkuAction.
func (c *SkuActionClient) Query() *SkuActionQuery {
	return &SkuActionQuery{config: c.config}
}

// Get returns a SkuAction entity by its id.
func (c *SkuActionClient) Get(ctx context.Context, id int) (*SkuAction, error) {
	return c.Query().Where(skuaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SkuActionClient) GetX(ctx context.Context, id int) *SkuAction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryConfig queries the config edge of a SkuAction.
func (c *SkuActionClient) QueryConfig(sa *SkuAction) *SkuConfigQuery {
	query := &SkuConfigQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(skuaction.Table, skuaction.FieldID, id),
			sqlgraph.To(skuconfig.Table, skuconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, skuaction.ConfigTable, skuaction.ConfigColumn),
		)
		fromV = sqlgraph.Neighbors(sa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTemplate queries the template edge of a SkuAction.
func (c *SkuActionClient) QueryTemplate(sa *SkuAction) *SkuTemplateQuery {
	query := &SkuTemplateQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(skuaction.Table, skuaction.FieldID, id),
			sqlgraph.To(skutemplate.Table, skutemplate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, skuaction.TemplateTable, skuaction.TemplateColumn),
		)
		fromV = sqlgraph.Neighbors(sa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatusCode queries the status_code edge of a SkuAction.
func (c *SkuActionClient) QueryStatusCode(sa *SkuAction) *SkuStatusCodeQuery {
	query := &SkuStatusCodeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(skuaction.Table, skuaction.FieldID, id),
			sqlgraph.To(skustatuscode.Table, skustatuscode.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, skuaction.StatusCodeTable, skuaction.StatusCodeColumn),
		)
		fromV = sqlgraph.Neighbors(sa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SkuActionClient) Hooks() []Hook {
	return c.hooks.SkuAction
}

// SkuConfigClient is a client for the SkuConfig schema.
type SkuConfigClient struct {
	config
}

// NewSkuConfigClient returns a client for the SkuConfig from the given config.
func NewSkuConfigClient(c config) *SkuConfigClient {
	return &SkuConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `skuconfig.Hooks(f(g(h())))`.
func (c *SkuConfigClient) Use(hooks ...Hook) {
	c.hooks.SkuConfig = append(c.hooks.SkuConfig, hooks...)
}

// Create returns a create builder for SkuConfig.
func (c *SkuConfigClient) Create() *SkuConfigCreate {
	mutation := newSkuConfigMutation(c.config, OpCreate)
	return &SkuConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SkuConfig entities.
func (c *SkuConfigClient) CreateBulk(builders ...*SkuConfigCreate) *SkuConfigCreateBulk {
	return &SkuConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SkuConfig.
func (c *SkuConfigClient) Update() *SkuConfigUpdate {
	mutation := newSkuConfigMutation(c.config, OpUpdate)
	return &SkuConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SkuConfigClient) UpdateOne(sc *SkuConfig) *SkuConfigUpdateOne {
	mutation := newSkuConfigMutation(c.config, OpUpdateOne, withSkuConfig(sc))
	return &SkuConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SkuConfigClient) UpdateOneID(id int) *SkuConfigUpdateOne {
	mutation := newSkuConfigMutation(c.config, OpUpdateOne, withSkuConfigID(id))
	return &SkuConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SkuConfig.
func (c *SkuConfigClient) Delete() *SkuConfigDelete {
	mutation := newSkuConfigMutation(c.config, OpDelete)
	return &SkuConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SkuConfigClient) DeleteOne(sc *SkuConfig) *SkuConfigDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SkuConfigClient) DeleteOneID(id int) *SkuConfigDeleteOne {
	builder := c.Delete().Where(skuconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SkuConfigDeleteOne{builder}
}

// Query returns a query builder for SkuConfig.
func (c *SkuConfigClient) Query() *SkuConfigQuery {
	return &SkuConfigQuery{config: c.config}
}

// Get returns a SkuConfig entity by its id.
func (c *SkuConfigClient) Get(ctx context.Context, id int) (*SkuConfig, error) {
	return c.Query().Where(skuconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SkuConfigClient) GetX(ctx context.Context, id int) *SkuConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAction queries the action edge of a SkuConfig.
func (c *SkuConfigClient) QueryAction(sc *SkuConfig) *SkuActionQuery {
	query := &SkuActionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(skuconfig.Table, skuconfig.FieldID, id),
			sqlgraph.To(skuaction.Table, skuaction.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, skuconfig.ActionTable, skuconfig.ActionColumn),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SkuConfigClient) Hooks() []Hook {
	return c.hooks.SkuConfig
}

// SkuStatusCodeClient is a client for the SkuStatusCode schema.
type SkuStatusCodeClient struct {
	config
}

// NewSkuStatusCodeClient returns a client for the SkuStatusCode from the given config.
func NewSkuStatusCodeClient(c config) *SkuStatusCodeClient {
	return &SkuStatusCodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `skustatuscode.Hooks(f(g(h())))`.
func (c *SkuStatusCodeClient) Use(hooks ...Hook) {
	c.hooks.SkuStatusCode = append(c.hooks.SkuStatusCode, hooks...)
}

// Create returns a create builder for SkuStatusCode.
func (c *SkuStatusCodeClient) Create() *SkuStatusCodeCreate {
	mutation := newSkuStatusCodeMutation(c.config, OpCreate)
	return &SkuStatusCodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SkuStatusCode entities.
func (c *SkuStatusCodeClient) CreateBulk(builders ...*SkuStatusCodeCreate) *SkuStatusCodeCreateBulk {
	return &SkuStatusCodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SkuStatusCode.
func (c *SkuStatusCodeClient) Update() *SkuStatusCodeUpdate {
	mutation := newSkuStatusCodeMutation(c.config, OpUpdate)
	return &SkuStatusCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SkuStatusCodeClient) UpdateOne(ssc *SkuStatusCode) *SkuStatusCodeUpdateOne {
	mutation := newSkuStatusCodeMutation(c.config, OpUpdateOne, withSkuStatusCode(ssc))
	return &SkuStatusCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SkuStatusCodeClient) UpdateOneID(id int) *SkuStatusCodeUpdateOne {
	mutation := newSkuStatusCodeMutation(c.config, OpUpdateOne, withSkuStatusCodeID(id))
	return &SkuStatusCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SkuStatusCode.
func (c *SkuStatusCodeClient) Delete() *SkuStatusCodeDelete {
	mutation := newSkuStatusCodeMutation(c.config, OpDelete)
	return &SkuStatusCodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SkuStatusCodeClient) DeleteOne(ssc *SkuStatusCode) *SkuStatusCodeDeleteOne {
	return c.DeleteOneID(ssc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SkuStatusCodeClient) DeleteOneID(id int) *SkuStatusCodeDeleteOne {
	builder := c.Delete().Where(skustatuscode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SkuStatusCodeDeleteOne{builder}
}

// Query returns a query builder for SkuStatusCode.
func (c *SkuStatusCodeClient) Query() *SkuStatusCodeQuery {
	return &SkuStatusCodeQuery{config: c.config}
}

// Get returns a SkuStatusCode entity by its id.
func (c *SkuStatusCodeClient) Get(ctx context.Context, id int) (*SkuStatusCode, error) {
	return c.Query().Where(skustatuscode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SkuStatusCodeClient) GetX(ctx context.Context, id int) *SkuStatusCode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAction queries the action edge of a SkuStatusCode.
func (c *SkuStatusCodeClient) QueryAction(ssc *SkuStatusCode) *SkuActionQuery {
	query := &SkuActionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ssc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(skustatuscode.Table, skustatuscode.FieldID, id),
			sqlgraph.To(skuaction.Table, skuaction.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, skustatuscode.ActionTable, skustatuscode.ActionColumn),
		)
		fromV = sqlgraph.Neighbors(ssc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SkuStatusCodeClient) Hooks() []Hook {
	return c.hooks.SkuStatusCode
}

// SkuTemplateClient is a client for the SkuTemplate schema.
type SkuTemplateClient struct {
	config
}

// NewSkuTemplateClient returns a client for the SkuTemplate from the given config.
func NewSkuTemplateClient(c config) *SkuTemplateClient {
	return &SkuTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `skutemplate.Hooks(f(g(h())))`.
func (c *SkuTemplateClient) Use(hooks ...Hook) {
	c.hooks.SkuTemplate = append(c.hooks.SkuTemplate, hooks...)
}

// Create returns a create builder for SkuTemplate.
func (c *SkuTemplateClient) Create() *SkuTemplateCreate {
	mutation := newSkuTemplateMutation(c.config, OpCreate)
	return &SkuTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SkuTemplate entities.
func (c *SkuTemplateClient) CreateBulk(builders ...*SkuTemplateCreate) *SkuTemplateCreateBulk {
	return &SkuTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SkuTemplate.
func (c *SkuTemplateClient) Update() *SkuTemplateUpdate {
	mutation := newSkuTemplateMutation(c.config, OpUpdate)
	return &SkuTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SkuTemplateClient) UpdateOne(st *SkuTemplate) *SkuTemplateUpdateOne {
	mutation := newSkuTemplateMutation(c.config, OpUpdateOne, withSkuTemplate(st))
	return &SkuTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SkuTemplateClient) UpdateOneID(id int) *SkuTemplateUpdateOne {
	mutation := newSkuTemplateMutation(c.config, OpUpdateOne, withSkuTemplateID(id))
	return &SkuTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SkuTemplate.
func (c *SkuTemplateClient) Delete() *SkuTemplateDelete {
	mutation := newSkuTemplateMutation(c.config, OpDelete)
	return &SkuTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SkuTemplateClient) DeleteOne(st *SkuTemplate) *SkuTemplateDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SkuTemplateClient) DeleteOneID(id int) *SkuTemplateDeleteOne {
	builder := c.Delete().Where(skutemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SkuTemplateDeleteOne{builder}
}

// Query returns a query builder for SkuTemplate.
func (c *SkuTemplateClient) Query() *SkuTemplateQuery {
	return &SkuTemplateQuery{config: c.config}
}

// Get returns a SkuTemplate entity by its id.
func (c *SkuTemplateClient) Get(ctx context.Context, id int) (*SkuTemplate, error) {
	return c.Query().Where(skutemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SkuTemplateClient) GetX(ctx context.Context, id int) *SkuTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAction queries the action edge of a SkuTemplate.
func (c *SkuTemplateClient) QueryAction(st *SkuTemplate) *SkuActionQuery {
	query := &SkuActionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(skutemplate.Table, skutemplate.FieldID, id),
			sqlgraph.To(skuaction.Table, skuaction.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, skutemplate.ActionTable, skutemplate.ActionColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SkuTemplateClient) Hooks() []Hook {
	return c.hooks.SkuTemplate
}
