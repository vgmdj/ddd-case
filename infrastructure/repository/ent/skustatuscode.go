// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skuaction"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skustatuscode"
)

// SkuStatusCode is the model entity for the SkuStatusCode schema.
type SkuStatusCode struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// InsuranceCode holds the value of the "insurance_code" field.
	InsuranceCode string `json:"insurance_code,omitempty"`
	// ReflectCode holds the value of the "reflect_code" field.
	ReflectCode string `json:"reflect_code,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt time.Time `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt time.Time `json:"update_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SkuStatusCodeQuery when eager-loading is set.
	Edges         SkuStatusCodeEdges `json:"edges"`
	sku_action_id *int
}

// SkuStatusCodeEdges holds the relations/edges for other nodes in the graph.
type SkuStatusCodeEdges struct {
	// Action holds the value of the action edge.
	Action *SkuAction
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ActionOrErr returns the Action value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SkuStatusCodeEdges) ActionOrErr() (*SkuAction, error) {
	if e.loadedTypes[0] {
		if e.Action == nil {
			// The edge action was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: skuaction.Label}
		}
		return e.Action, nil
	}
	return nil, &NotLoadedError{edge: "action"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SkuStatusCode) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // insurance_code
		&sql.NullString{}, // reflect_code
		&sql.NullInt64{},  // status
		&sql.NullTime{},   // create_at
		&sql.NullTime{},   // update_at
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*SkuStatusCode) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // sku_action_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SkuStatusCode fields.
func (ssc *SkuStatusCode) assignValues(values ...interface{}) error {
	if m, n := len(values), len(skustatuscode.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ssc.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field insurance_code", values[0])
	} else if value.Valid {
		ssc.InsuranceCode = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field reflect_code", values[1])
	} else if value.Valid {
		ssc.ReflectCode = value.String
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[2])
	} else if value.Valid {
		ssc.Status = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_at", values[3])
	} else if value.Valid {
		ssc.CreateAt = value.Time
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_at", values[4])
	} else if value.Valid {
		ssc.UpdateAt = value.Time
	}
	values = values[5:]
	if len(values) == len(skustatuscode.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field sku_action_id", value)
		} else if value.Valid {
			ssc.sku_action_id = new(int)
			*ssc.sku_action_id = int(value.Int64)
		}
	}
	return nil
}

// QueryAction queries the action edge of the SkuStatusCode.
func (ssc *SkuStatusCode) QueryAction() *SkuActionQuery {
	return (&SkuStatusCodeClient{config: ssc.config}).QueryAction(ssc)
}

// Update returns a builder for updating this SkuStatusCode.
// Note that, you need to call SkuStatusCode.Unwrap() before calling this method, if this SkuStatusCode
// was returned from a transaction, and the transaction was committed or rolled back.
func (ssc *SkuStatusCode) Update() *SkuStatusCodeUpdateOne {
	return (&SkuStatusCodeClient{config: ssc.config}).UpdateOne(ssc)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ssc *SkuStatusCode) Unwrap() *SkuStatusCode {
	tx, ok := ssc.config.driver.(*txDriver)
	if !ok {
		panic("ent: SkuStatusCode is not a transactional entity")
	}
	ssc.config.driver = tx.drv
	return ssc
}

// String implements the fmt.Stringer.
func (ssc *SkuStatusCode) String() string {
	var builder strings.Builder
	builder.WriteString("SkuStatusCode(")
	builder.WriteString(fmt.Sprintf("id=%v", ssc.ID))
	builder.WriteString(", insurance_code=")
	builder.WriteString(ssc.InsuranceCode)
	builder.WriteString(", reflect_code=")
	builder.WriteString(ssc.ReflectCode)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", ssc.Status))
	builder.WriteString(", create_at=")
	builder.WriteString(ssc.CreateAt.Format(time.ANSIC))
	builder.WriteString(", update_at=")
	builder.WriteString(ssc.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SkuStatusCodes is a parsable slice of SkuStatusCode.
type SkuStatusCodes []*SkuStatusCode

func (ssc SkuStatusCodes) config(cfg config) {
	for _i := range ssc {
		ssc[_i].config = cfg
	}
}
