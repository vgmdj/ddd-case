// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/predicate"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skuaction"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skuconfig"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skustatuscode"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skutemplate"
)

// SkuActionQuery is the builder for querying SkuAction entities.
type SkuActionQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	predicates []predicate.SkuAction
	// eager-loading edges.
	withConfig     *SkuConfigQuery
	withTemplate   *SkuTemplateQuery
	withStatusCode *SkuStatusCodeQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (saq *SkuActionQuery) Where(ps ...predicate.SkuAction) *SkuActionQuery {
	saq.predicates = append(saq.predicates, ps...)
	return saq
}

// Limit adds a limit step to the query.
func (saq *SkuActionQuery) Limit(limit int) *SkuActionQuery {
	saq.limit = &limit
	return saq
}

// Offset adds an offset step to the query.
func (saq *SkuActionQuery) Offset(offset int) *SkuActionQuery {
	saq.offset = &offset
	return saq
}

// Order adds an order step to the query.
func (saq *SkuActionQuery) Order(o ...OrderFunc) *SkuActionQuery {
	saq.order = append(saq.order, o...)
	return saq
}

// QueryConfig chains the current query on the config edge.
func (saq *SkuActionQuery) QueryConfig() *SkuConfigQuery {
	query := &SkuConfigQuery{config: saq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(skuaction.Table, skuaction.FieldID, selector),
			sqlgraph.To(skuconfig.Table, skuconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, skuaction.ConfigTable, skuaction.ConfigColumn),
		)
		fromU = sqlgraph.SetNeighbors(saq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTemplate chains the current query on the template edge.
func (saq *SkuActionQuery) QueryTemplate() *SkuTemplateQuery {
	query := &SkuTemplateQuery{config: saq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(skuaction.Table, skuaction.FieldID, selector),
			sqlgraph.To(skutemplate.Table, skutemplate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, skuaction.TemplateTable, skuaction.TemplateColumn),
		)
		fromU = sqlgraph.SetNeighbors(saq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStatusCode chains the current query on the status_code edge.
func (saq *SkuActionQuery) QueryStatusCode() *SkuStatusCodeQuery {
	query := &SkuStatusCodeQuery{config: saq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(skuaction.Table, skuaction.FieldID, selector),
			sqlgraph.To(skustatuscode.Table, skustatuscode.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, skuaction.StatusCodeTable, skuaction.StatusCodeColumn),
		)
		fromU = sqlgraph.SetNeighbors(saq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SkuAction entity in the query. Returns *NotFoundError when no skuaction was found.
func (saq *SkuActionQuery) First(ctx context.Context) (*SkuAction, error) {
	nodes, err := saq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{skuaction.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (saq *SkuActionQuery) FirstX(ctx context.Context) *SkuAction {
	node, err := saq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SkuAction id in the query. Returns *NotFoundError when no id was found.
func (saq *SkuActionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = saq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{skuaction.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (saq *SkuActionQuery) FirstIDX(ctx context.Context) int {
	id, err := saq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only SkuAction entity in the query, returns an error if not exactly one entity was returned.
func (saq *SkuActionQuery) Only(ctx context.Context) (*SkuAction, error) {
	nodes, err := saq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{skuaction.Label}
	default:
		return nil, &NotSingularError{skuaction.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (saq *SkuActionQuery) OnlyX(ctx context.Context) *SkuAction {
	node, err := saq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only SkuAction id in the query, returns an error if not exactly one id was returned.
func (saq *SkuActionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = saq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{skuaction.Label}
	default:
		err = &NotSingularError{skuaction.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (saq *SkuActionQuery) OnlyIDX(ctx context.Context) int {
	id, err := saq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SkuActions.
func (saq *SkuActionQuery) All(ctx context.Context) ([]*SkuAction, error) {
	if err := saq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return saq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (saq *SkuActionQuery) AllX(ctx context.Context) []*SkuAction {
	nodes, err := saq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SkuAction ids.
func (saq *SkuActionQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := saq.Select(skuaction.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (saq *SkuActionQuery) IDsX(ctx context.Context) []int {
	ids, err := saq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (saq *SkuActionQuery) Count(ctx context.Context) (int, error) {
	if err := saq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return saq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (saq *SkuActionQuery) CountX(ctx context.Context) int {
	count, err := saq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (saq *SkuActionQuery) Exist(ctx context.Context) (bool, error) {
	if err := saq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return saq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (saq *SkuActionQuery) ExistX(ctx context.Context) bool {
	exist, err := saq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (saq *SkuActionQuery) Clone() *SkuActionQuery {
	if saq == nil {
		return nil
	}
	return &SkuActionQuery{
		config:         saq.config,
		limit:          saq.limit,
		offset:         saq.offset,
		order:          append([]OrderFunc{}, saq.order...),
		predicates:     append([]predicate.SkuAction{}, saq.predicates...),
		withConfig:     saq.withConfig.Clone(),
		withTemplate:   saq.withTemplate.Clone(),
		withStatusCode: saq.withStatusCode.Clone(),
		// clone intermediate query.
		sql:  saq.sql.Clone(),
		path: saq.path,
	}
}

//  WithConfig tells the query-builder to eager-loads the nodes that are connected to
// the "config" edge. The optional arguments used to configure the query builder of the edge.
func (saq *SkuActionQuery) WithConfig(opts ...func(*SkuConfigQuery)) *SkuActionQuery {
	query := &SkuConfigQuery{config: saq.config}
	for _, opt := range opts {
		opt(query)
	}
	saq.withConfig = query
	return saq
}

//  WithTemplate tells the query-builder to eager-loads the nodes that are connected to
// the "template" edge. The optional arguments used to configure the query builder of the edge.
func (saq *SkuActionQuery) WithTemplate(opts ...func(*SkuTemplateQuery)) *SkuActionQuery {
	query := &SkuTemplateQuery{config: saq.config}
	for _, opt := range opts {
		opt(query)
	}
	saq.withTemplate = query
	return saq
}

//  WithStatusCode tells the query-builder to eager-loads the nodes that are connected to
// the "status_code" edge. The optional arguments used to configure the query builder of the edge.
func (saq *SkuActionQuery) WithStatusCode(opts ...func(*SkuStatusCodeQuery)) *SkuActionQuery {
	query := &SkuStatusCodeQuery{config: saq.config}
	for _, opt := range opts {
		opt(query)
	}
	saq.withStatusCode = query
	return saq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AppID string `json:"app_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SkuAction.Query().
//		GroupBy(skuaction.FieldAppID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (saq *SkuActionQuery) GroupBy(field string, fields ...string) *SkuActionGroupBy {
	group := &SkuActionGroupBy{config: saq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := saq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return saq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		AppID string `json:"app_id,omitempty"`
//	}
//
//	client.SkuAction.Query().
//		Select(skuaction.FieldAppID).
//		Scan(ctx, &v)
//
func (saq *SkuActionQuery) Select(field string, fields ...string) *SkuActionSelect {
	selector := &SkuActionSelect{config: saq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := saq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return saq.sqlQuery(), nil
	}
	return selector
}

func (saq *SkuActionQuery) prepareQuery(ctx context.Context) error {
	if saq.path != nil {
		prev, err := saq.path(ctx)
		if err != nil {
			return err
		}
		saq.sql = prev
	}
	return nil
}

func (saq *SkuActionQuery) sqlAll(ctx context.Context) ([]*SkuAction, error) {
	var (
		nodes       = []*SkuAction{}
		_spec       = saq.querySpec()
		loadedTypes = [3]bool{
			saq.withConfig != nil,
			saq.withTemplate != nil,
			saq.withStatusCode != nil,
		}
	)
	_spec.ScanValues = func() []interface{} {
		node := &SkuAction{config: saq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, saq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := saq.withConfig; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*SkuAction)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Config = []*SkuConfig{}
		}
		query.withFKs = true
		query.Where(predicate.SkuConfig(func(s *sql.Selector) {
			s.Where(sql.InValues(skuaction.ConfigColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.sku_action_id
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "sku_action_id" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "sku_action_id" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Config = append(node.Edges.Config, n)
		}
	}

	if query := saq.withTemplate; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*SkuAction)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Template = []*SkuTemplate{}
		}
		query.withFKs = true
		query.Where(predicate.SkuTemplate(func(s *sql.Selector) {
			s.Where(sql.InValues(skuaction.TemplateColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.sku_action_id
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "sku_action_id" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "sku_action_id" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Template = append(node.Edges.Template, n)
		}
	}

	if query := saq.withStatusCode; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*SkuAction)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.StatusCode = []*SkuStatusCode{}
		}
		query.withFKs = true
		query.Where(predicate.SkuStatusCode(func(s *sql.Selector) {
			s.Where(sql.InValues(skuaction.StatusCodeColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.sku_action_id
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "sku_action_id" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "sku_action_id" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.StatusCode = append(node.Edges.StatusCode, n)
		}
	}

	return nodes, nil
}

func (saq *SkuActionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := saq.querySpec()
	return sqlgraph.CountNodes(ctx, saq.driver, _spec)
}

func (saq *SkuActionQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := saq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (saq *SkuActionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   skuaction.Table,
			Columns: skuaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: skuaction.FieldID,
			},
		},
		From:   saq.sql,
		Unique: true,
	}
	if ps := saq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := saq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := saq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := saq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, skuaction.ValidColumn)
			}
		}
	}
	return _spec
}

func (saq *SkuActionQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(saq.driver.Dialect())
	t1 := builder.Table(skuaction.Table)
	selector := builder.Select(t1.Columns(skuaction.Columns...)...).From(t1)
	if saq.sql != nil {
		selector = saq.sql
		selector.Select(selector.Columns(skuaction.Columns...)...)
	}
	for _, p := range saq.predicates {
		p(selector)
	}
	for _, p := range saq.order {
		p(selector, skuaction.ValidColumn)
	}
	if offset := saq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := saq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SkuActionGroupBy is the builder for group-by SkuAction entities.
type SkuActionGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sagb *SkuActionGroupBy) Aggregate(fns ...AggregateFunc) *SkuActionGroupBy {
	sagb.fns = append(sagb.fns, fns...)
	return sagb
}

// Scan applies the group-by query and scan the result into the given value.
func (sagb *SkuActionGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := sagb.path(ctx)
	if err != nil {
		return err
	}
	sagb.sql = query
	return sagb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sagb *SkuActionGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := sagb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (sagb *SkuActionGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(sagb.fields) > 1 {
		return nil, errors.New("ent: SkuActionGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := sagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sagb *SkuActionGroupBy) StringsX(ctx context.Context) []string {
	v, err := sagb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (sagb *SkuActionGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sagb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{skuaction.Label}
	default:
		err = fmt.Errorf("ent: SkuActionGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sagb *SkuActionGroupBy) StringX(ctx context.Context) string {
	v, err := sagb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (sagb *SkuActionGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(sagb.fields) > 1 {
		return nil, errors.New("ent: SkuActionGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := sagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sagb *SkuActionGroupBy) IntsX(ctx context.Context) []int {
	v, err := sagb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (sagb *SkuActionGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sagb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{skuaction.Label}
	default:
		err = fmt.Errorf("ent: SkuActionGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sagb *SkuActionGroupBy) IntX(ctx context.Context) int {
	v, err := sagb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (sagb *SkuActionGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(sagb.fields) > 1 {
		return nil, errors.New("ent: SkuActionGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := sagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sagb *SkuActionGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := sagb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (sagb *SkuActionGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sagb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{skuaction.Label}
	default:
		err = fmt.Errorf("ent: SkuActionGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sagb *SkuActionGroupBy) Float64X(ctx context.Context) float64 {
	v, err := sagb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (sagb *SkuActionGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(sagb.fields) > 1 {
		return nil, errors.New("ent: SkuActionGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := sagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sagb *SkuActionGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := sagb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (sagb *SkuActionGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sagb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{skuaction.Label}
	default:
		err = fmt.Errorf("ent: SkuActionGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sagb *SkuActionGroupBy) BoolX(ctx context.Context) bool {
	v, err := sagb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sagb *SkuActionGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range sagb.fields {
		if !skuaction.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := sagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sagb *SkuActionGroupBy) sqlQuery() *sql.Selector {
	selector := sagb.sql
	columns := make([]string, 0, len(sagb.fields)+len(sagb.fns))
	columns = append(columns, sagb.fields...)
	for _, fn := range sagb.fns {
		columns = append(columns, fn(selector, skuaction.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(sagb.fields...)
}

// SkuActionSelect is the builder for select fields of SkuAction entities.
type SkuActionSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (sas *SkuActionSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := sas.path(ctx)
	if err != nil {
		return err
	}
	sas.sql = query
	return sas.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sas *SkuActionSelect) ScanX(ctx context.Context, v interface{}) {
	if err := sas.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (sas *SkuActionSelect) Strings(ctx context.Context) ([]string, error) {
	if len(sas.fields) > 1 {
		return nil, errors.New("ent: SkuActionSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := sas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sas *SkuActionSelect) StringsX(ctx context.Context) []string {
	v, err := sas.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (sas *SkuActionSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sas.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{skuaction.Label}
	default:
		err = fmt.Errorf("ent: SkuActionSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sas *SkuActionSelect) StringX(ctx context.Context) string {
	v, err := sas.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (sas *SkuActionSelect) Ints(ctx context.Context) ([]int, error) {
	if len(sas.fields) > 1 {
		return nil, errors.New("ent: SkuActionSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := sas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sas *SkuActionSelect) IntsX(ctx context.Context) []int {
	v, err := sas.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (sas *SkuActionSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sas.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{skuaction.Label}
	default:
		err = fmt.Errorf("ent: SkuActionSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sas *SkuActionSelect) IntX(ctx context.Context) int {
	v, err := sas.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (sas *SkuActionSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(sas.fields) > 1 {
		return nil, errors.New("ent: SkuActionSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := sas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sas *SkuActionSelect) Float64sX(ctx context.Context) []float64 {
	v, err := sas.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (sas *SkuActionSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sas.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{skuaction.Label}
	default:
		err = fmt.Errorf("ent: SkuActionSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sas *SkuActionSelect) Float64X(ctx context.Context) float64 {
	v, err := sas.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (sas *SkuActionSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(sas.fields) > 1 {
		return nil, errors.New("ent: SkuActionSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := sas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sas *SkuActionSelect) BoolsX(ctx context.Context) []bool {
	v, err := sas.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (sas *SkuActionSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sas.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{skuaction.Label}
	default:
		err = fmt.Errorf("ent: SkuActionSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sas *SkuActionSelect) BoolX(ctx context.Context) bool {
	v, err := sas.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sas *SkuActionSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range sas.fields {
		if !skuaction.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := sas.sqlQuery().Query()
	if err := sas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sas *SkuActionSelect) sqlQuery() sql.Querier {
	selector := sas.sql
	selector.Select(selector.Columns(sas.fields...)...)
	return selector
}
