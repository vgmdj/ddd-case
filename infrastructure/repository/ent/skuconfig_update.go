// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/predicate"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skuaction"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skuconfig"
)

// SkuConfigUpdate is the builder for updating SkuConfig entities.
type SkuConfigUpdate struct {
	config
	hooks    []Hook
	mutation *SkuConfigMutation
}

// Where adds a new predicate for the builder.
func (scu *SkuConfigUpdate) Where(ps ...predicate.SkuConfig) *SkuConfigUpdate {
	scu.mutation.predicates = append(scu.mutation.predicates, ps...)
	return scu
}

// SetConfig sets the config field.
func (scu *SkuConfigUpdate) SetConfig(s string) *SkuConfigUpdate {
	scu.mutation.SetConfig(s)
	return scu
}

// SetStatus sets the status field.
func (scu *SkuConfigUpdate) SetStatus(i int) *SkuConfigUpdate {
	scu.mutation.ResetStatus()
	scu.mutation.SetStatus(i)
	return scu
}

// AddStatus adds i to status.
func (scu *SkuConfigUpdate) AddStatus(i int) *SkuConfigUpdate {
	scu.mutation.AddStatus(i)
	return scu
}

// SetUpdateAt sets the update_at field.
func (scu *SkuConfigUpdate) SetUpdateAt(t time.Time) *SkuConfigUpdate {
	scu.mutation.SetUpdateAt(t)
	return scu
}

// SetActionID sets the action edge to SkuAction by id.
func (scu *SkuConfigUpdate) SetActionID(id int) *SkuConfigUpdate {
	scu.mutation.SetActionID(id)
	return scu
}

// SetNillableActionID sets the action edge to SkuAction by id if the given value is not nil.
func (scu *SkuConfigUpdate) SetNillableActionID(id *int) *SkuConfigUpdate {
	if id != nil {
		scu = scu.SetActionID(*id)
	}
	return scu
}

// SetAction sets the action edge to SkuAction.
func (scu *SkuConfigUpdate) SetAction(s *SkuAction) *SkuConfigUpdate {
	return scu.SetActionID(s.ID)
}

// Mutation returns the SkuConfigMutation object of the builder.
func (scu *SkuConfigUpdate) Mutation() *SkuConfigMutation {
	return scu.mutation
}

// ClearAction clears the "action" edge to type SkuAction.
func (scu *SkuConfigUpdate) ClearAction() *SkuConfigUpdate {
	scu.mutation.ClearAction()
	return scu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *SkuConfigUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	scu.defaults()
	if len(scu.hooks) == 0 {
		affected, err = scu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SkuConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			scu.mutation = mutation
			affected, err = scu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(scu.hooks) - 1; i >= 0; i-- {
			mut = scu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, scu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (scu *SkuConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *SkuConfigUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *SkuConfigUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scu *SkuConfigUpdate) defaults() {
	if _, ok := scu.mutation.UpdateAt(); !ok {
		v := skuconfig.UpdateDefaultUpdateAt()
		scu.mutation.SetUpdateAt(v)
	}
}

func (scu *SkuConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   skuconfig.Table,
			Columns: skuconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: skuconfig.FieldID,
			},
		},
	}
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skuconfig.FieldConfig,
		})
	}
	if value, ok := scu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: skuconfig.FieldStatus,
		})
	}
	if value, ok := scu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: skuconfig.FieldStatus,
		})
	}
	if value, ok := scu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: skuconfig.FieldUpdateAt,
		})
	}
	if scu.mutation.ActionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skuconfig.ActionTable,
			Columns: []string{skuconfig.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skuaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.ActionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skuconfig.ActionTable,
			Columns: []string{skuconfig.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skuaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{skuconfig.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SkuConfigUpdateOne is the builder for updating a single SkuConfig entity.
type SkuConfigUpdateOne struct {
	config
	hooks    []Hook
	mutation *SkuConfigMutation
}

// SetConfig sets the config field.
func (scuo *SkuConfigUpdateOne) SetConfig(s string) *SkuConfigUpdateOne {
	scuo.mutation.SetConfig(s)
	return scuo
}

// SetStatus sets the status field.
func (scuo *SkuConfigUpdateOne) SetStatus(i int) *SkuConfigUpdateOne {
	scuo.mutation.ResetStatus()
	scuo.mutation.SetStatus(i)
	return scuo
}

// AddStatus adds i to status.
func (scuo *SkuConfigUpdateOne) AddStatus(i int) *SkuConfigUpdateOne {
	scuo.mutation.AddStatus(i)
	return scuo
}

// SetUpdateAt sets the update_at field.
func (scuo *SkuConfigUpdateOne) SetUpdateAt(t time.Time) *SkuConfigUpdateOne {
	scuo.mutation.SetUpdateAt(t)
	return scuo
}

// SetActionID sets the action edge to SkuAction by id.
func (scuo *SkuConfigUpdateOne) SetActionID(id int) *SkuConfigUpdateOne {
	scuo.mutation.SetActionID(id)
	return scuo
}

// SetNillableActionID sets the action edge to SkuAction by id if the given value is not nil.
func (scuo *SkuConfigUpdateOne) SetNillableActionID(id *int) *SkuConfigUpdateOne {
	if id != nil {
		scuo = scuo.SetActionID(*id)
	}
	return scuo
}

// SetAction sets the action edge to SkuAction.
func (scuo *SkuConfigUpdateOne) SetAction(s *SkuAction) *SkuConfigUpdateOne {
	return scuo.SetActionID(s.ID)
}

// Mutation returns the SkuConfigMutation object of the builder.
func (scuo *SkuConfigUpdateOne) Mutation() *SkuConfigMutation {
	return scuo.mutation
}

// ClearAction clears the "action" edge to type SkuAction.
func (scuo *SkuConfigUpdateOne) ClearAction() *SkuConfigUpdateOne {
	scuo.mutation.ClearAction()
	return scuo
}

// Save executes the query and returns the updated entity.
func (scuo *SkuConfigUpdateOne) Save(ctx context.Context) (*SkuConfig, error) {
	var (
		err  error
		node *SkuConfig
	)
	scuo.defaults()
	if len(scuo.hooks) == 0 {
		node, err = scuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SkuConfigMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			scuo.mutation = mutation
			node, err = scuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(scuo.hooks) - 1; i >= 0; i-- {
			mut = scuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, scuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *SkuConfigUpdateOne) SaveX(ctx context.Context) *SkuConfig {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *SkuConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *SkuConfigUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scuo *SkuConfigUpdateOne) defaults() {
	if _, ok := scuo.mutation.UpdateAt(); !ok {
		v := skuconfig.UpdateDefaultUpdateAt()
		scuo.mutation.SetUpdateAt(v)
	}
}

func (scuo *SkuConfigUpdateOne) sqlSave(ctx context.Context) (_node *SkuConfig, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   skuconfig.Table,
			Columns: skuconfig.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: skuconfig.FieldID,
			},
		},
	}
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SkuConfig.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := scuo.mutation.Config(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skuconfig.FieldConfig,
		})
	}
	if value, ok := scuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: skuconfig.FieldStatus,
		})
	}
	if value, ok := scuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: skuconfig.FieldStatus,
		})
	}
	if value, ok := scuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: skuconfig.FieldUpdateAt,
		})
	}
	if scuo.mutation.ActionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skuconfig.ActionTable,
			Columns: []string{skuconfig.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skuaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.ActionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skuconfig.ActionTable,
			Columns: []string{skuconfig.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skuaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SkuConfig{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{skuconfig.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
