// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/predicate"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skuaction"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skuconfig"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skustatuscode"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skutemplate"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeSkuAction     = "SkuAction"
	TypeSkuConfig     = "SkuConfig"
	TypeSkuStatusCode = "SkuStatusCode"
	TypeSkuTemplate   = "SkuTemplate"
)

// SkuActionMutation represents an operation that mutate the SkuActions
// nodes in the graph.
type SkuActionMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	app_id             *string
	sku_name           *string
	sku_name_cn        *string
	action             *string
	status             *int
	addstatus          *int
	create_at          *time.Time
	update_at          *time.Time
	clearedFields      map[string]struct{}
	_config            map[int]struct{}
	removed_config     map[int]struct{}
	cleared_config     bool
	template           map[int]struct{}
	removedtemplate    map[int]struct{}
	clearedtemplate    bool
	status_code        map[int]struct{}
	removedstatus_code map[int]struct{}
	clearedstatus_code bool
	done               bool
	oldValue           func(context.Context) (*SkuAction, error)
	predicates         []predicate.SkuAction
}

var _ ent.Mutation = (*SkuActionMutation)(nil)

// skuactionOption allows to manage the mutation configuration using functional options.
type skuactionOption func(*SkuActionMutation)

// newSkuActionMutation creates new mutation for SkuAction.
func newSkuActionMutation(c config, op Op, opts ...skuactionOption) *SkuActionMutation {
	m := &SkuActionMutation{
		config:        c,
		op:            op,
		typ:           TypeSkuAction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSkuActionID sets the id field of the mutation.
func withSkuActionID(id int) skuactionOption {
	return func(m *SkuActionMutation) {
		var (
			err   error
			once  sync.Once
			value *SkuAction
		)
		m.oldValue = func(ctx context.Context) (*SkuAction, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SkuAction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSkuAction sets the old SkuAction of the mutation.
func withSkuAction(node *SkuAction) skuactionOption {
	return func(m *SkuActionMutation) {
		m.oldValue = func(context.Context) (*SkuAction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SkuActionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SkuActionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *SkuActionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAppID sets the app_id field.
func (m *SkuActionMutation) SetAppID(s string) {
	m.app_id = &s
}

// AppID returns the app_id value in the mutation.
func (m *SkuActionMutation) AppID() (r string, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old app_id value of the SkuAction.
// If the SkuAction object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SkuActionMutation) OldAppID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAppID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID reset all changes of the "app_id" field.
func (m *SkuActionMutation) ResetAppID() {
	m.app_id = nil
}

// SetSkuName sets the sku_name field.
func (m *SkuActionMutation) SetSkuName(s string) {
	m.sku_name = &s
}

// SkuName returns the sku_name value in the mutation.
func (m *SkuActionMutation) SkuName() (r string, exists bool) {
	v := m.sku_name
	if v == nil {
		return
	}
	return *v, true
}

// OldSkuName returns the old sku_name value of the SkuAction.
// If the SkuAction object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SkuActionMutation) OldSkuName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSkuName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSkuName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSkuName: %w", err)
	}
	return oldValue.SkuName, nil
}

// ResetSkuName reset all changes of the "sku_name" field.
func (m *SkuActionMutation) ResetSkuName() {
	m.sku_name = nil
}

// SetSkuNameCn sets the sku_name_cn field.
func (m *SkuActionMutation) SetSkuNameCn(s string) {
	m.sku_name_cn = &s
}

// SkuNameCn returns the sku_name_cn value in the mutation.
func (m *SkuActionMutation) SkuNameCn() (r string, exists bool) {
	v := m.sku_name_cn
	if v == nil {
		return
	}
	return *v, true
}

// OldSkuNameCn returns the old sku_name_cn value of the SkuAction.
// If the SkuAction object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SkuActionMutation) OldSkuNameCn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSkuNameCn is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSkuNameCn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSkuNameCn: %w", err)
	}
	return oldValue.SkuNameCn, nil
}

// ResetSkuNameCn reset all changes of the "sku_name_cn" field.
func (m *SkuActionMutation) ResetSkuNameCn() {
	m.sku_name_cn = nil
}

// SetAction sets the action field.
func (m *SkuActionMutation) SetAction(s string) {
	m.action = &s
}

// Action returns the action value in the mutation.
func (m *SkuActionMutation) Action() (r string, exists bool) {
	v := m.action
	if v == nil {
		return
	}
	return *v, true
}

// OldAction returns the old action value of the SkuAction.
// If the SkuAction object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SkuActionMutation) OldAction(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAction is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAction: %w", err)
	}
	return oldValue.Action, nil
}

// ResetAction reset all changes of the "action" field.
func (m *SkuActionMutation) ResetAction() {
	m.action = nil
}

// SetStatus sets the status field.
func (m *SkuActionMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the status value in the mutation.
func (m *SkuActionMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old status value of the SkuAction.
// If the SkuAction object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SkuActionMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to status.
func (m *SkuActionMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the status field in this mutation.
func (m *SkuActionMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus reset all changes of the "status" field.
func (m *SkuActionMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetCreateAt sets the create_at field.
func (m *SkuActionMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the create_at value in the mutation.
func (m *SkuActionMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old create_at value of the SkuAction.
// If the SkuAction object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SkuActionMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// ResetCreateAt reset all changes of the "create_at" field.
func (m *SkuActionMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetUpdateAt sets the update_at field.
func (m *SkuActionMutation) SetUpdateAt(t time.Time) {
	m.update_at = &t
}

// UpdateAt returns the update_at value in the mutation.
func (m *SkuActionMutation) UpdateAt() (r time.Time, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old update_at value of the SkuAction.
// If the SkuAction object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SkuActionMutation) OldUpdateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// ResetUpdateAt reset all changes of the "update_at" field.
func (m *SkuActionMutation) ResetUpdateAt() {
	m.update_at = nil
}

// AddConfigIDs adds the config edge to SkuConfig by ids.
func (m *SkuActionMutation) AddConfigIDs(ids ...int) {
	if m._config == nil {
		m._config = make(map[int]struct{})
	}
	for i := range ids {
		m._config[ids[i]] = struct{}{}
	}
}

// ClearConfig clears the config edge to SkuConfig.
func (m *SkuActionMutation) ClearConfig() {
	m.cleared_config = true
}

// ConfigCleared returns if the edge config was cleared.
func (m *SkuActionMutation) ConfigCleared() bool {
	return m.cleared_config
}

// RemoveConfigIDs removes the config edge to SkuConfig by ids.
func (m *SkuActionMutation) RemoveConfigIDs(ids ...int) {
	if m.removed_config == nil {
		m.removed_config = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_config[ids[i]] = struct{}{}
	}
}

// RemovedConfig returns the removed ids of config.
func (m *SkuActionMutation) RemovedConfigIDs() (ids []int) {
	for id := range m.removed_config {
		ids = append(ids, id)
	}
	return
}

// ConfigIDs returns the config ids in the mutation.
func (m *SkuActionMutation) ConfigIDs() (ids []int) {
	for id := range m._config {
		ids = append(ids, id)
	}
	return
}

// ResetConfig reset all changes of the "config" edge.
func (m *SkuActionMutation) ResetConfig() {
	m._config = nil
	m.cleared_config = false
	m.removed_config = nil
}

// AddTemplateIDs adds the template edge to SkuTemplate by ids.
func (m *SkuActionMutation) AddTemplateIDs(ids ...int) {
	if m.template == nil {
		m.template = make(map[int]struct{})
	}
	for i := range ids {
		m.template[ids[i]] = struct{}{}
	}
}

// ClearTemplate clears the template edge to SkuTemplate.
func (m *SkuActionMutation) ClearTemplate() {
	m.clearedtemplate = true
}

// TemplateCleared returns if the edge template was cleared.
func (m *SkuActionMutation) TemplateCleared() bool {
	return m.clearedtemplate
}

// RemoveTemplateIDs removes the template edge to SkuTemplate by ids.
func (m *SkuActionMutation) RemoveTemplateIDs(ids ...int) {
	if m.removedtemplate == nil {
		m.removedtemplate = make(map[int]struct{})
	}
	for i := range ids {
		m.removedtemplate[ids[i]] = struct{}{}
	}
}

// RemovedTemplate returns the removed ids of template.
func (m *SkuActionMutation) RemovedTemplateIDs() (ids []int) {
	for id := range m.removedtemplate {
		ids = append(ids, id)
	}
	return
}

// TemplateIDs returns the template ids in the mutation.
func (m *SkuActionMutation) TemplateIDs() (ids []int) {
	for id := range m.template {
		ids = append(ids, id)
	}
	return
}

// ResetTemplate reset all changes of the "template" edge.
func (m *SkuActionMutation) ResetTemplate() {
	m.template = nil
	m.clearedtemplate = false
	m.removedtemplate = nil
}

// AddStatusCodeIDs adds the status_code edge to SkuStatusCode by ids.
func (m *SkuActionMutation) AddStatusCodeIDs(ids ...int) {
	if m.status_code == nil {
		m.status_code = make(map[int]struct{})
	}
	for i := range ids {
		m.status_code[ids[i]] = struct{}{}
	}
}

// ClearStatusCode clears the status_code edge to SkuStatusCode.
func (m *SkuActionMutation) ClearStatusCode() {
	m.clearedstatus_code = true
}

// StatusCodeCleared returns if the edge status_code was cleared.
func (m *SkuActionMutation) StatusCodeCleared() bool {
	return m.clearedstatus_code
}

// RemoveStatusCodeIDs removes the status_code edge to SkuStatusCode by ids.
func (m *SkuActionMutation) RemoveStatusCodeIDs(ids ...int) {
	if m.removedstatus_code == nil {
		m.removedstatus_code = make(map[int]struct{})
	}
	for i := range ids {
		m.removedstatus_code[ids[i]] = struct{}{}
	}
}

// RemovedStatusCode returns the removed ids of status_code.
func (m *SkuActionMutation) RemovedStatusCodeIDs() (ids []int) {
	for id := range m.removedstatus_code {
		ids = append(ids, id)
	}
	return
}

// StatusCodeIDs returns the status_code ids in the mutation.
func (m *SkuActionMutation) StatusCodeIDs() (ids []int) {
	for id := range m.status_code {
		ids = append(ids, id)
	}
	return
}

// ResetStatusCode reset all changes of the "status_code" edge.
func (m *SkuActionMutation) ResetStatusCode() {
	m.status_code = nil
	m.clearedstatus_code = false
	m.removedstatus_code = nil
}

// Op returns the operation name.
func (m *SkuActionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SkuAction).
func (m *SkuActionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *SkuActionMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.app_id != nil {
		fields = append(fields, skuaction.FieldAppID)
	}
	if m.sku_name != nil {
		fields = append(fields, skuaction.FieldSkuName)
	}
	if m.sku_name_cn != nil {
		fields = append(fields, skuaction.FieldSkuNameCn)
	}
	if m.action != nil {
		fields = append(fields, skuaction.FieldAction)
	}
	if m.status != nil {
		fields = append(fields, skuaction.FieldStatus)
	}
	if m.create_at != nil {
		fields = append(fields, skuaction.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, skuaction.FieldUpdateAt)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *SkuActionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case skuaction.FieldAppID:
		return m.AppID()
	case skuaction.FieldSkuName:
		return m.SkuName()
	case skuaction.FieldSkuNameCn:
		return m.SkuNameCn()
	case skuaction.FieldAction:
		return m.Action()
	case skuaction.FieldStatus:
		return m.Status()
	case skuaction.FieldCreateAt:
		return m.CreateAt()
	case skuaction.FieldUpdateAt:
		return m.UpdateAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *SkuActionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case skuaction.FieldAppID:
		return m.OldAppID(ctx)
	case skuaction.FieldSkuName:
		return m.OldSkuName(ctx)
	case skuaction.FieldSkuNameCn:
		return m.OldSkuNameCn(ctx)
	case skuaction.FieldAction:
		return m.OldAction(ctx)
	case skuaction.FieldStatus:
		return m.OldStatus(ctx)
	case skuaction.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case skuaction.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	}
	return nil, fmt.Errorf("unknown SkuAction field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SkuActionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case skuaction.FieldAppID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case skuaction.FieldSkuName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSkuName(v)
		return nil
	case skuaction.FieldSkuNameCn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSkuNameCn(v)
		return nil
	case skuaction.FieldAction:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAction(v)
		return nil
	case skuaction.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case skuaction.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case skuaction.FieldUpdateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	}
	return fmt.Errorf("unknown SkuAction field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *SkuActionMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, skuaction.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *SkuActionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case skuaction.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SkuActionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case skuaction.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown SkuAction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *SkuActionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *SkuActionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *SkuActionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SkuAction nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *SkuActionMutation) ResetField(name string) error {
	switch name {
	case skuaction.FieldAppID:
		m.ResetAppID()
		return nil
	case skuaction.FieldSkuName:
		m.ResetSkuName()
		return nil
	case skuaction.FieldSkuNameCn:
		m.ResetSkuNameCn()
		return nil
	case skuaction.FieldAction:
		m.ResetAction()
		return nil
	case skuaction.FieldStatus:
		m.ResetStatus()
		return nil
	case skuaction.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case skuaction.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	}
	return fmt.Errorf("unknown SkuAction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *SkuActionMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m._config != nil {
		edges = append(edges, skuaction.EdgeConfig)
	}
	if m.template != nil {
		edges = append(edges, skuaction.EdgeTemplate)
	}
	if m.status_code != nil {
		edges = append(edges, skuaction.EdgeStatusCode)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *SkuActionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case skuaction.EdgeConfig:
		ids := make([]ent.Value, 0, len(m._config))
		for id := range m._config {
			ids = append(ids, id)
		}
		return ids
	case skuaction.EdgeTemplate:
		ids := make([]ent.Value, 0, len(m.template))
		for id := range m.template {
			ids = append(ids, id)
		}
		return ids
	case skuaction.EdgeStatusCode:
		ids := make([]ent.Value, 0, len(m.status_code))
		for id := range m.status_code {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *SkuActionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removed_config != nil {
		edges = append(edges, skuaction.EdgeConfig)
	}
	if m.removedtemplate != nil {
		edges = append(edges, skuaction.EdgeTemplate)
	}
	if m.removedstatus_code != nil {
		edges = append(edges, skuaction.EdgeStatusCode)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *SkuActionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case skuaction.EdgeConfig:
		ids := make([]ent.Value, 0, len(m.removed_config))
		for id := range m.removed_config {
			ids = append(ids, id)
		}
		return ids
	case skuaction.EdgeTemplate:
		ids := make([]ent.Value, 0, len(m.removedtemplate))
		for id := range m.removedtemplate {
			ids = append(ids, id)
		}
		return ids
	case skuaction.EdgeStatusCode:
		ids := make([]ent.Value, 0, len(m.removedstatus_code))
		for id := range m.removedstatus_code {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *SkuActionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleared_config {
		edges = append(edges, skuaction.EdgeConfig)
	}
	if m.clearedtemplate {
		edges = append(edges, skuaction.EdgeTemplate)
	}
	if m.clearedstatus_code {
		edges = append(edges, skuaction.EdgeStatusCode)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *SkuActionMutation) EdgeCleared(name string) bool {
	switch name {
	case skuaction.EdgeConfig:
		return m.cleared_config
	case skuaction.EdgeTemplate:
		return m.clearedtemplate
	case skuaction.EdgeStatusCode:
		return m.clearedstatus_code
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *SkuActionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown SkuAction unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *SkuActionMutation) ResetEdge(name string) error {
	switch name {
	case skuaction.EdgeConfig:
		m.ResetConfig()
		return nil
	case skuaction.EdgeTemplate:
		m.ResetTemplate()
		return nil
	case skuaction.EdgeStatusCode:
		m.ResetStatusCode()
		return nil
	}
	return fmt.Errorf("unknown SkuAction edge %s", name)
}

// SkuConfigMutation represents an operation that mutate the SkuConfigs
// nodes in the graph.
type SkuConfigMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_config       *string
	status        *int
	addstatus     *int
	create_at     *time.Time
	update_at     *time.Time
	clearedFields map[string]struct{}
	action        *int
	clearedaction bool
	done          bool
	oldValue      func(context.Context) (*SkuConfig, error)
	predicates    []predicate.SkuConfig
}

var _ ent.Mutation = (*SkuConfigMutation)(nil)

// skuconfigOption allows to manage the mutation configuration using functional options.
type skuconfigOption func(*SkuConfigMutation)

// newSkuConfigMutation creates new mutation for SkuConfig.
func newSkuConfigMutation(c config, op Op, opts ...skuconfigOption) *SkuConfigMutation {
	m := &SkuConfigMutation{
		config:        c,
		op:            op,
		typ:           TypeSkuConfig,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSkuConfigID sets the id field of the mutation.
func withSkuConfigID(id int) skuconfigOption {
	return func(m *SkuConfigMutation) {
		var (
			err   error
			once  sync.Once
			value *SkuConfig
		)
		m.oldValue = func(ctx context.Context) (*SkuConfig, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SkuConfig.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSkuConfig sets the old SkuConfig of the mutation.
func withSkuConfig(node *SkuConfig) skuconfigOption {
	return func(m *SkuConfigMutation) {
		m.oldValue = func(context.Context) (*SkuConfig, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SkuConfigMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SkuConfigMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *SkuConfigMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetConfig sets the config field.
func (m *SkuConfigMutation) SetConfig(s string) {
	m._config = &s
}

// Config returns the config value in the mutation.
func (m *SkuConfigMutation) Config() (r string, exists bool) {
	v := m._config
	if v == nil {
		return
	}
	return *v, true
}

// OldConfig returns the old config value of the SkuConfig.
// If the SkuConfig object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SkuConfigMutation) OldConfig(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldConfig is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldConfig requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfig: %w", err)
	}
	return oldValue.Config, nil
}

// ResetConfig reset all changes of the "config" field.
func (m *SkuConfigMutation) ResetConfig() {
	m._config = nil
}

// SetStatus sets the status field.
func (m *SkuConfigMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the status value in the mutation.
func (m *SkuConfigMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old status value of the SkuConfig.
// If the SkuConfig object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SkuConfigMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to status.
func (m *SkuConfigMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the status field in this mutation.
func (m *SkuConfigMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus reset all changes of the "status" field.
func (m *SkuConfigMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetCreateAt sets the create_at field.
func (m *SkuConfigMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the create_at value in the mutation.
func (m *SkuConfigMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old create_at value of the SkuConfig.
// If the SkuConfig object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SkuConfigMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// ResetCreateAt reset all changes of the "create_at" field.
func (m *SkuConfigMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetUpdateAt sets the update_at field.
func (m *SkuConfigMutation) SetUpdateAt(t time.Time) {
	m.update_at = &t
}

// UpdateAt returns the update_at value in the mutation.
func (m *SkuConfigMutation) UpdateAt() (r time.Time, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old update_at value of the SkuConfig.
// If the SkuConfig object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SkuConfigMutation) OldUpdateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// ResetUpdateAt reset all changes of the "update_at" field.
func (m *SkuConfigMutation) ResetUpdateAt() {
	m.update_at = nil
}

// SetActionID sets the action edge to SkuAction by id.
func (m *SkuConfigMutation) SetActionID(id int) {
	m.action = &id
}

// ClearAction clears the action edge to SkuAction.
func (m *SkuConfigMutation) ClearAction() {
	m.clearedaction = true
}

// ActionCleared returns if the edge action was cleared.
func (m *SkuConfigMutation) ActionCleared() bool {
	return m.clearedaction
}

// ActionID returns the action id in the mutation.
func (m *SkuConfigMutation) ActionID() (id int, exists bool) {
	if m.action != nil {
		return *m.action, true
	}
	return
}

// ActionIDs returns the action ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ActionID instead. It exists only for internal usage by the builders.
func (m *SkuConfigMutation) ActionIDs() (ids []int) {
	if id := m.action; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAction reset all changes of the "action" edge.
func (m *SkuConfigMutation) ResetAction() {
	m.action = nil
	m.clearedaction = false
}

// Op returns the operation name.
func (m *SkuConfigMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SkuConfig).
func (m *SkuConfigMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *SkuConfigMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m._config != nil {
		fields = append(fields, skuconfig.FieldConfig)
	}
	if m.status != nil {
		fields = append(fields, skuconfig.FieldStatus)
	}
	if m.create_at != nil {
		fields = append(fields, skuconfig.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, skuconfig.FieldUpdateAt)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *SkuConfigMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case skuconfig.FieldConfig:
		return m.Config()
	case skuconfig.FieldStatus:
		return m.Status()
	case skuconfig.FieldCreateAt:
		return m.CreateAt()
	case skuconfig.FieldUpdateAt:
		return m.UpdateAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *SkuConfigMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case skuconfig.FieldConfig:
		return m.OldConfig(ctx)
	case skuconfig.FieldStatus:
		return m.OldStatus(ctx)
	case skuconfig.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case skuconfig.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	}
	return nil, fmt.Errorf("unknown SkuConfig field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SkuConfigMutation) SetField(name string, value ent.Value) error {
	switch name {
	case skuconfig.FieldConfig:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfig(v)
		return nil
	case skuconfig.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case skuconfig.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case skuconfig.FieldUpdateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	}
	return fmt.Errorf("unknown SkuConfig field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *SkuConfigMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, skuconfig.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *SkuConfigMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case skuconfig.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SkuConfigMutation) AddField(name string, value ent.Value) error {
	switch name {
	case skuconfig.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown SkuConfig numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *SkuConfigMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *SkuConfigMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *SkuConfigMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SkuConfig nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *SkuConfigMutation) ResetField(name string) error {
	switch name {
	case skuconfig.FieldConfig:
		m.ResetConfig()
		return nil
	case skuconfig.FieldStatus:
		m.ResetStatus()
		return nil
	case skuconfig.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case skuconfig.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	}
	return fmt.Errorf("unknown SkuConfig field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *SkuConfigMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.action != nil {
		edges = append(edges, skuconfig.EdgeAction)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *SkuConfigMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case skuconfig.EdgeAction:
		if id := m.action; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *SkuConfigMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *SkuConfigMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *SkuConfigMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedaction {
		edges = append(edges, skuconfig.EdgeAction)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *SkuConfigMutation) EdgeCleared(name string) bool {
	switch name {
	case skuconfig.EdgeAction:
		return m.clearedaction
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *SkuConfigMutation) ClearEdge(name string) error {
	switch name {
	case skuconfig.EdgeAction:
		m.ClearAction()
		return nil
	}
	return fmt.Errorf("unknown SkuConfig unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *SkuConfigMutation) ResetEdge(name string) error {
	switch name {
	case skuconfig.EdgeAction:
		m.ResetAction()
		return nil
	}
	return fmt.Errorf("unknown SkuConfig edge %s", name)
}

// SkuStatusCodeMutation represents an operation that mutate the SkuStatusCodes
// nodes in the graph.
type SkuStatusCodeMutation struct {
	config
	op             Op
	typ            string
	id             *int
	insurance_code *string
	reflect_code   *string
	status         *int
	addstatus      *int
	create_at      *time.Time
	update_at      *time.Time
	clearedFields  map[string]struct{}
	action         *int
	clearedaction  bool
	done           bool
	oldValue       func(context.Context) (*SkuStatusCode, error)
	predicates     []predicate.SkuStatusCode
}

var _ ent.Mutation = (*SkuStatusCodeMutation)(nil)

// skustatuscodeOption allows to manage the mutation configuration using functional options.
type skustatuscodeOption func(*SkuStatusCodeMutation)

// newSkuStatusCodeMutation creates new mutation for SkuStatusCode.
func newSkuStatusCodeMutation(c config, op Op, opts ...skustatuscodeOption) *SkuStatusCodeMutation {
	m := &SkuStatusCodeMutation{
		config:        c,
		op:            op,
		typ:           TypeSkuStatusCode,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSkuStatusCodeID sets the id field of the mutation.
func withSkuStatusCodeID(id int) skustatuscodeOption {
	return func(m *SkuStatusCodeMutation) {
		var (
			err   error
			once  sync.Once
			value *SkuStatusCode
		)
		m.oldValue = func(ctx context.Context) (*SkuStatusCode, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SkuStatusCode.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSkuStatusCode sets the old SkuStatusCode of the mutation.
func withSkuStatusCode(node *SkuStatusCode) skustatuscodeOption {
	return func(m *SkuStatusCodeMutation) {
		m.oldValue = func(context.Context) (*SkuStatusCode, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SkuStatusCodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SkuStatusCodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *SkuStatusCodeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetInsuranceCode sets the insurance_code field.
func (m *SkuStatusCodeMutation) SetInsuranceCode(s string) {
	m.insurance_code = &s
}

// InsuranceCode returns the insurance_code value in the mutation.
func (m *SkuStatusCodeMutation) InsuranceCode() (r string, exists bool) {
	v := m.insurance_code
	if v == nil {
		return
	}
	return *v, true
}

// OldInsuranceCode returns the old insurance_code value of the SkuStatusCode.
// If the SkuStatusCode object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SkuStatusCodeMutation) OldInsuranceCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInsuranceCode is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInsuranceCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInsuranceCode: %w", err)
	}
	return oldValue.InsuranceCode, nil
}

// ResetInsuranceCode reset all changes of the "insurance_code" field.
func (m *SkuStatusCodeMutation) ResetInsuranceCode() {
	m.insurance_code = nil
}

// SetReflectCode sets the reflect_code field.
func (m *SkuStatusCodeMutation) SetReflectCode(s string) {
	m.reflect_code = &s
}

// ReflectCode returns the reflect_code value in the mutation.
func (m *SkuStatusCodeMutation) ReflectCode() (r string, exists bool) {
	v := m.reflect_code
	if v == nil {
		return
	}
	return *v, true
}

// OldReflectCode returns the old reflect_code value of the SkuStatusCode.
// If the SkuStatusCode object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SkuStatusCodeMutation) OldReflectCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldReflectCode is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldReflectCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReflectCode: %w", err)
	}
	return oldValue.ReflectCode, nil
}

// ResetReflectCode reset all changes of the "reflect_code" field.
func (m *SkuStatusCodeMutation) ResetReflectCode() {
	m.reflect_code = nil
}

// SetStatus sets the status field.
func (m *SkuStatusCodeMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the status value in the mutation.
func (m *SkuStatusCodeMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old status value of the SkuStatusCode.
// If the SkuStatusCode object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SkuStatusCodeMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to status.
func (m *SkuStatusCodeMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the status field in this mutation.
func (m *SkuStatusCodeMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus reset all changes of the "status" field.
func (m *SkuStatusCodeMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetCreateAt sets the create_at field.
func (m *SkuStatusCodeMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the create_at value in the mutation.
func (m *SkuStatusCodeMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old create_at value of the SkuStatusCode.
// If the SkuStatusCode object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SkuStatusCodeMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// ResetCreateAt reset all changes of the "create_at" field.
func (m *SkuStatusCodeMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetUpdateAt sets the update_at field.
func (m *SkuStatusCodeMutation) SetUpdateAt(t time.Time) {
	m.update_at = &t
}

// UpdateAt returns the update_at value in the mutation.
func (m *SkuStatusCodeMutation) UpdateAt() (r time.Time, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old update_at value of the SkuStatusCode.
// If the SkuStatusCode object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SkuStatusCodeMutation) OldUpdateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// ResetUpdateAt reset all changes of the "update_at" field.
func (m *SkuStatusCodeMutation) ResetUpdateAt() {
	m.update_at = nil
}

// SetActionID sets the action edge to SkuAction by id.
func (m *SkuStatusCodeMutation) SetActionID(id int) {
	m.action = &id
}

// ClearAction clears the action edge to SkuAction.
func (m *SkuStatusCodeMutation) ClearAction() {
	m.clearedaction = true
}

// ActionCleared returns if the edge action was cleared.
func (m *SkuStatusCodeMutation) ActionCleared() bool {
	return m.clearedaction
}

// ActionID returns the action id in the mutation.
func (m *SkuStatusCodeMutation) ActionID() (id int, exists bool) {
	if m.action != nil {
		return *m.action, true
	}
	return
}

// ActionIDs returns the action ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ActionID instead. It exists only for internal usage by the builders.
func (m *SkuStatusCodeMutation) ActionIDs() (ids []int) {
	if id := m.action; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAction reset all changes of the "action" edge.
func (m *SkuStatusCodeMutation) ResetAction() {
	m.action = nil
	m.clearedaction = false
}

// Op returns the operation name.
func (m *SkuStatusCodeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SkuStatusCode).
func (m *SkuStatusCodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *SkuStatusCodeMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.insurance_code != nil {
		fields = append(fields, skustatuscode.FieldInsuranceCode)
	}
	if m.reflect_code != nil {
		fields = append(fields, skustatuscode.FieldReflectCode)
	}
	if m.status != nil {
		fields = append(fields, skustatuscode.FieldStatus)
	}
	if m.create_at != nil {
		fields = append(fields, skustatuscode.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, skustatuscode.FieldUpdateAt)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *SkuStatusCodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case skustatuscode.FieldInsuranceCode:
		return m.InsuranceCode()
	case skustatuscode.FieldReflectCode:
		return m.ReflectCode()
	case skustatuscode.FieldStatus:
		return m.Status()
	case skustatuscode.FieldCreateAt:
		return m.CreateAt()
	case skustatuscode.FieldUpdateAt:
		return m.UpdateAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *SkuStatusCodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case skustatuscode.FieldInsuranceCode:
		return m.OldInsuranceCode(ctx)
	case skustatuscode.FieldReflectCode:
		return m.OldReflectCode(ctx)
	case skustatuscode.FieldStatus:
		return m.OldStatus(ctx)
	case skustatuscode.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case skustatuscode.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	}
	return nil, fmt.Errorf("unknown SkuStatusCode field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SkuStatusCodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case skustatuscode.FieldInsuranceCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInsuranceCode(v)
		return nil
	case skustatuscode.FieldReflectCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReflectCode(v)
		return nil
	case skustatuscode.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case skustatuscode.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case skustatuscode.FieldUpdateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	}
	return fmt.Errorf("unknown SkuStatusCode field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *SkuStatusCodeMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, skustatuscode.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *SkuStatusCodeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case skustatuscode.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SkuStatusCodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case skustatuscode.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown SkuStatusCode numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *SkuStatusCodeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *SkuStatusCodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *SkuStatusCodeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SkuStatusCode nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *SkuStatusCodeMutation) ResetField(name string) error {
	switch name {
	case skustatuscode.FieldInsuranceCode:
		m.ResetInsuranceCode()
		return nil
	case skustatuscode.FieldReflectCode:
		m.ResetReflectCode()
		return nil
	case skustatuscode.FieldStatus:
		m.ResetStatus()
		return nil
	case skustatuscode.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case skustatuscode.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	}
	return fmt.Errorf("unknown SkuStatusCode field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *SkuStatusCodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.action != nil {
		edges = append(edges, skustatuscode.EdgeAction)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *SkuStatusCodeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case skustatuscode.EdgeAction:
		if id := m.action; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *SkuStatusCodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *SkuStatusCodeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *SkuStatusCodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedaction {
		edges = append(edges, skustatuscode.EdgeAction)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *SkuStatusCodeMutation) EdgeCleared(name string) bool {
	switch name {
	case skustatuscode.EdgeAction:
		return m.clearedaction
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *SkuStatusCodeMutation) ClearEdge(name string) error {
	switch name {
	case skustatuscode.EdgeAction:
		m.ClearAction()
		return nil
	}
	return fmt.Errorf("unknown SkuStatusCode unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *SkuStatusCodeMutation) ResetEdge(name string) error {
	switch name {
	case skustatuscode.EdgeAction:
		m.ResetAction()
		return nil
	}
	return fmt.Errorf("unknown SkuStatusCode edge %s", name)
}

// SkuTemplateMutation represents an operation that mutate the SkuTemplates
// nodes in the graph.
type SkuTemplateMutation struct {
	config
	op            Op
	typ           string
	id            *int
	request       *string
	response      *string
	status        *int
	addstatus     *int
	create_at     *time.Time
	update_at     *time.Time
	clearedFields map[string]struct{}
	action        *int
	clearedaction bool
	done          bool
	oldValue      func(context.Context) (*SkuTemplate, error)
	predicates    []predicate.SkuTemplate
}

var _ ent.Mutation = (*SkuTemplateMutation)(nil)

// skutemplateOption allows to manage the mutation configuration using functional options.
type skutemplateOption func(*SkuTemplateMutation)

// newSkuTemplateMutation creates new mutation for SkuTemplate.
func newSkuTemplateMutation(c config, op Op, opts ...skutemplateOption) *SkuTemplateMutation {
	m := &SkuTemplateMutation{
		config:        c,
		op:            op,
		typ:           TypeSkuTemplate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSkuTemplateID sets the id field of the mutation.
func withSkuTemplateID(id int) skutemplateOption {
	return func(m *SkuTemplateMutation) {
		var (
			err   error
			once  sync.Once
			value *SkuTemplate
		)
		m.oldValue = func(ctx context.Context) (*SkuTemplate, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SkuTemplate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSkuTemplate sets the old SkuTemplate of the mutation.
func withSkuTemplate(node *SkuTemplate) skutemplateOption {
	return func(m *SkuTemplateMutation) {
		m.oldValue = func(context.Context) (*SkuTemplate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SkuTemplateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SkuTemplateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *SkuTemplateMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetRequest sets the request field.
func (m *SkuTemplateMutation) SetRequest(s string) {
	m.request = &s
}

// Request returns the request value in the mutation.
func (m *SkuTemplateMutation) Request() (r string, exists bool) {
	v := m.request
	if v == nil {
		return
	}
	return *v, true
}

// OldRequest returns the old request value of the SkuTemplate.
// If the SkuTemplate object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SkuTemplateMutation) OldRequest(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRequest is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRequest requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequest: %w", err)
	}
	return oldValue.Request, nil
}

// ResetRequest reset all changes of the "request" field.
func (m *SkuTemplateMutation) ResetRequest() {
	m.request = nil
}

// SetResponse sets the response field.
func (m *SkuTemplateMutation) SetResponse(s string) {
	m.response = &s
}

// Response returns the response value in the mutation.
func (m *SkuTemplateMutation) Response() (r string, exists bool) {
	v := m.response
	if v == nil {
		return
	}
	return *v, true
}

// OldResponse returns the old response value of the SkuTemplate.
// If the SkuTemplate object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SkuTemplateMutation) OldResponse(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldResponse is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldResponse requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResponse: %w", err)
	}
	return oldValue.Response, nil
}

// ResetResponse reset all changes of the "response" field.
func (m *SkuTemplateMutation) ResetResponse() {
	m.response = nil
}

// SetStatus sets the status field.
func (m *SkuTemplateMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the status value in the mutation.
func (m *SkuTemplateMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old status value of the SkuTemplate.
// If the SkuTemplate object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SkuTemplateMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to status.
func (m *SkuTemplateMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the status field in this mutation.
func (m *SkuTemplateMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus reset all changes of the "status" field.
func (m *SkuTemplateMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetCreateAt sets the create_at field.
func (m *SkuTemplateMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the create_at value in the mutation.
func (m *SkuTemplateMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old create_at value of the SkuTemplate.
// If the SkuTemplate object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SkuTemplateMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// ResetCreateAt reset all changes of the "create_at" field.
func (m *SkuTemplateMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetUpdateAt sets the update_at field.
func (m *SkuTemplateMutation) SetUpdateAt(t time.Time) {
	m.update_at = &t
}

// UpdateAt returns the update_at value in the mutation.
func (m *SkuTemplateMutation) UpdateAt() (r time.Time, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old update_at value of the SkuTemplate.
// If the SkuTemplate object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SkuTemplateMutation) OldUpdateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// ResetUpdateAt reset all changes of the "update_at" field.
func (m *SkuTemplateMutation) ResetUpdateAt() {
	m.update_at = nil
}

// SetActionID sets the action edge to SkuAction by id.
func (m *SkuTemplateMutation) SetActionID(id int) {
	m.action = &id
}

// ClearAction clears the action edge to SkuAction.
func (m *SkuTemplateMutation) ClearAction() {
	m.clearedaction = true
}

// ActionCleared returns if the edge action was cleared.
func (m *SkuTemplateMutation) ActionCleared() bool {
	return m.clearedaction
}

// ActionID returns the action id in the mutation.
func (m *SkuTemplateMutation) ActionID() (id int, exists bool) {
	if m.action != nil {
		return *m.action, true
	}
	return
}

// ActionIDs returns the action ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ActionID instead. It exists only for internal usage by the builders.
func (m *SkuTemplateMutation) ActionIDs() (ids []int) {
	if id := m.action; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAction reset all changes of the "action" edge.
func (m *SkuTemplateMutation) ResetAction() {
	m.action = nil
	m.clearedaction = false
}

// Op returns the operation name.
func (m *SkuTemplateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SkuTemplate).
func (m *SkuTemplateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *SkuTemplateMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.request != nil {
		fields = append(fields, skutemplate.FieldRequest)
	}
	if m.response != nil {
		fields = append(fields, skutemplate.FieldResponse)
	}
	if m.status != nil {
		fields = append(fields, skutemplate.FieldStatus)
	}
	if m.create_at != nil {
		fields = append(fields, skutemplate.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, skutemplate.FieldUpdateAt)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *SkuTemplateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case skutemplate.FieldRequest:
		return m.Request()
	case skutemplate.FieldResponse:
		return m.Response()
	case skutemplate.FieldStatus:
		return m.Status()
	case skutemplate.FieldCreateAt:
		return m.CreateAt()
	case skutemplate.FieldUpdateAt:
		return m.UpdateAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *SkuTemplateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case skutemplate.FieldRequest:
		return m.OldRequest(ctx)
	case skutemplate.FieldResponse:
		return m.OldResponse(ctx)
	case skutemplate.FieldStatus:
		return m.OldStatus(ctx)
	case skutemplate.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case skutemplate.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	}
	return nil, fmt.Errorf("unknown SkuTemplate field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SkuTemplateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case skutemplate.FieldRequest:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequest(v)
		return nil
	case skutemplate.FieldResponse:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResponse(v)
		return nil
	case skutemplate.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case skutemplate.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case skutemplate.FieldUpdateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	}
	return fmt.Errorf("unknown SkuTemplate field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *SkuTemplateMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, skutemplate.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *SkuTemplateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case skutemplate.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SkuTemplateMutation) AddField(name string, value ent.Value) error {
	switch name {
	case skutemplate.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown SkuTemplate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *SkuTemplateMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *SkuTemplateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *SkuTemplateMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SkuTemplate nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *SkuTemplateMutation) ResetField(name string) error {
	switch name {
	case skutemplate.FieldRequest:
		m.ResetRequest()
		return nil
	case skutemplate.FieldResponse:
		m.ResetResponse()
		return nil
	case skutemplate.FieldStatus:
		m.ResetStatus()
		return nil
	case skutemplate.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case skutemplate.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	}
	return fmt.Errorf("unknown SkuTemplate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *SkuTemplateMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.action != nil {
		edges = append(edges, skutemplate.EdgeAction)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *SkuTemplateMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case skutemplate.EdgeAction:
		if id := m.action; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *SkuTemplateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *SkuTemplateMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *SkuTemplateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedaction {
		edges = append(edges, skutemplate.EdgeAction)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *SkuTemplateMutation) EdgeCleared(name string) bool {
	switch name {
	case skutemplate.EdgeAction:
		return m.clearedaction
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *SkuTemplateMutation) ClearEdge(name string) error {
	switch name {
	case skutemplate.EdgeAction:
		m.ClearAction()
		return nil
	}
	return fmt.Errorf("unknown SkuTemplate unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *SkuTemplateMutation) ResetEdge(name string) error {
	switch name {
	case skutemplate.EdgeAction:
		m.ResetAction()
		return nil
	}
	return fmt.Errorf("unknown SkuTemplate edge %s", name)
}
