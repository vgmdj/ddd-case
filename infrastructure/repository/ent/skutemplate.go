// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skuaction"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skutemplate"
)

// SkuTemplate is the model entity for the SkuTemplate schema.
type SkuTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Request holds the value of the "request" field.
	Request string `json:"request,omitempty"`
	// Response holds the value of the "response" field.
	Response string `json:"response,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt time.Time `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt time.Time `json:"update_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SkuTemplateQuery when eager-loading is set.
	Edges         SkuTemplateEdges `json:"edges"`
	sku_action_id *int
}

// SkuTemplateEdges holds the relations/edges for other nodes in the graph.
type SkuTemplateEdges struct {
	// Action holds the value of the action edge.
	Action *SkuAction
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ActionOrErr returns the Action value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SkuTemplateEdges) ActionOrErr() (*SkuAction, error) {
	if e.loadedTypes[0] {
		if e.Action == nil {
			// The edge action was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: skuaction.Label}
		}
		return e.Action, nil
	}
	return nil, &NotLoadedError{edge: "action"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SkuTemplate) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // request
		&sql.NullString{}, // response
		&sql.NullInt64{},  // status
		&sql.NullTime{},   // create_at
		&sql.NullTime{},   // update_at
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*SkuTemplate) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // sku_action_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SkuTemplate fields.
func (st *SkuTemplate) assignValues(values ...interface{}) error {
	if m, n := len(values), len(skutemplate.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	st.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field request", values[0])
	} else if value.Valid {
		st.Request = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field response", values[1])
	} else if value.Valid {
		st.Response = value.String
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[2])
	} else if value.Valid {
		st.Status = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field create_at", values[3])
	} else if value.Valid {
		st.CreateAt = value.Time
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field update_at", values[4])
	} else if value.Valid {
		st.UpdateAt = value.Time
	}
	values = values[5:]
	if len(values) == len(skutemplate.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field sku_action_id", value)
		} else if value.Valid {
			st.sku_action_id = new(int)
			*st.sku_action_id = int(value.Int64)
		}
	}
	return nil
}

// QueryAction queries the action edge of the SkuTemplate.
func (st *SkuTemplate) QueryAction() *SkuActionQuery {
	return (&SkuTemplateClient{config: st.config}).QueryAction(st)
}

// Update returns a builder for updating this SkuTemplate.
// Note that, you need to call SkuTemplate.Unwrap() before calling this method, if this SkuTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *SkuTemplate) Update() *SkuTemplateUpdateOne {
	return (&SkuTemplateClient{config: st.config}).UpdateOne(st)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (st *SkuTemplate) Unwrap() *SkuTemplate {
	tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: SkuTemplate is not a transactional entity")
	}
	st.config.driver = tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *SkuTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("SkuTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v", st.ID))
	builder.WriteString(", request=")
	builder.WriteString(st.Request)
	builder.WriteString(", response=")
	builder.WriteString(st.Response)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", st.Status))
	builder.WriteString(", create_at=")
	builder.WriteString(st.CreateAt.Format(time.ANSIC))
	builder.WriteString(", update_at=")
	builder.WriteString(st.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SkuTemplates is a parsable slice of SkuTemplate.
type SkuTemplates []*SkuTemplate

func (st SkuTemplates) config(cfg config) {
	for _i := range st {
		st[_i].config = cfg
	}
}
