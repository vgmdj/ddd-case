// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/predicate"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skuaction"
	"github.com/vgmdj/ddd-case/infrastructure/repository/ent/skutemplate"
)

// SkuTemplateUpdate is the builder for updating SkuTemplate entities.
type SkuTemplateUpdate struct {
	config
	hooks    []Hook
	mutation *SkuTemplateMutation
}

// Where adds a new predicate for the builder.
func (stu *SkuTemplateUpdate) Where(ps ...predicate.SkuTemplate) *SkuTemplateUpdate {
	stu.mutation.predicates = append(stu.mutation.predicates, ps...)
	return stu
}

// SetRequest sets the request field.
func (stu *SkuTemplateUpdate) SetRequest(s string) *SkuTemplateUpdate {
	stu.mutation.SetRequest(s)
	return stu
}

// SetResponse sets the response field.
func (stu *SkuTemplateUpdate) SetResponse(s string) *SkuTemplateUpdate {
	stu.mutation.SetResponse(s)
	return stu
}

// SetStatus sets the status field.
func (stu *SkuTemplateUpdate) SetStatus(i int) *SkuTemplateUpdate {
	stu.mutation.ResetStatus()
	stu.mutation.SetStatus(i)
	return stu
}

// AddStatus adds i to status.
func (stu *SkuTemplateUpdate) AddStatus(i int) *SkuTemplateUpdate {
	stu.mutation.AddStatus(i)
	return stu
}

// SetUpdateAt sets the update_at field.
func (stu *SkuTemplateUpdate) SetUpdateAt(t time.Time) *SkuTemplateUpdate {
	stu.mutation.SetUpdateAt(t)
	return stu
}

// SetActionID sets the action edge to SkuAction by id.
func (stu *SkuTemplateUpdate) SetActionID(id int) *SkuTemplateUpdate {
	stu.mutation.SetActionID(id)
	return stu
}

// SetNillableActionID sets the action edge to SkuAction by id if the given value is not nil.
func (stu *SkuTemplateUpdate) SetNillableActionID(id *int) *SkuTemplateUpdate {
	if id != nil {
		stu = stu.SetActionID(*id)
	}
	return stu
}

// SetAction sets the action edge to SkuAction.
func (stu *SkuTemplateUpdate) SetAction(s *SkuAction) *SkuTemplateUpdate {
	return stu.SetActionID(s.ID)
}

// Mutation returns the SkuTemplateMutation object of the builder.
func (stu *SkuTemplateUpdate) Mutation() *SkuTemplateMutation {
	return stu.mutation
}

// ClearAction clears the "action" edge to type SkuAction.
func (stu *SkuTemplateUpdate) ClearAction() *SkuTemplateUpdate {
	stu.mutation.ClearAction()
	return stu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *SkuTemplateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	stu.defaults()
	if len(stu.hooks) == 0 {
		affected, err = stu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SkuTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			stu.mutation = mutation
			affected, err = stu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(stu.hooks) - 1; i >= 0; i-- {
			mut = stu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (stu *SkuTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *SkuTemplateUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *SkuTemplateUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stu *SkuTemplateUpdate) defaults() {
	if _, ok := stu.mutation.UpdateAt(); !ok {
		v := skutemplate.UpdateDefaultUpdateAt()
		stu.mutation.SetUpdateAt(v)
	}
}

func (stu *SkuTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   skutemplate.Table,
			Columns: skutemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: skutemplate.FieldID,
			},
		},
	}
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.Request(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skutemplate.FieldRequest,
		})
	}
	if value, ok := stu.mutation.Response(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skutemplate.FieldResponse,
		})
	}
	if value, ok := stu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: skutemplate.FieldStatus,
		})
	}
	if value, ok := stu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: skutemplate.FieldStatus,
		})
	}
	if value, ok := stu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: skutemplate.FieldUpdateAt,
		})
	}
	if stu.mutation.ActionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skutemplate.ActionTable,
			Columns: []string{skutemplate.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skuaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.ActionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skutemplate.ActionTable,
			Columns: []string{skutemplate.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skuaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{skutemplate.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SkuTemplateUpdateOne is the builder for updating a single SkuTemplate entity.
type SkuTemplateUpdateOne struct {
	config
	hooks    []Hook
	mutation *SkuTemplateMutation
}

// SetRequest sets the request field.
func (stuo *SkuTemplateUpdateOne) SetRequest(s string) *SkuTemplateUpdateOne {
	stuo.mutation.SetRequest(s)
	return stuo
}

// SetResponse sets the response field.
func (stuo *SkuTemplateUpdateOne) SetResponse(s string) *SkuTemplateUpdateOne {
	stuo.mutation.SetResponse(s)
	return stuo
}

// SetStatus sets the status field.
func (stuo *SkuTemplateUpdateOne) SetStatus(i int) *SkuTemplateUpdateOne {
	stuo.mutation.ResetStatus()
	stuo.mutation.SetStatus(i)
	return stuo
}

// AddStatus adds i to status.
func (stuo *SkuTemplateUpdateOne) AddStatus(i int) *SkuTemplateUpdateOne {
	stuo.mutation.AddStatus(i)
	return stuo
}

// SetUpdateAt sets the update_at field.
func (stuo *SkuTemplateUpdateOne) SetUpdateAt(t time.Time) *SkuTemplateUpdateOne {
	stuo.mutation.SetUpdateAt(t)
	return stuo
}

// SetActionID sets the action edge to SkuAction by id.
func (stuo *SkuTemplateUpdateOne) SetActionID(id int) *SkuTemplateUpdateOne {
	stuo.mutation.SetActionID(id)
	return stuo
}

// SetNillableActionID sets the action edge to SkuAction by id if the given value is not nil.
func (stuo *SkuTemplateUpdateOne) SetNillableActionID(id *int) *SkuTemplateUpdateOne {
	if id != nil {
		stuo = stuo.SetActionID(*id)
	}
	return stuo
}

// SetAction sets the action edge to SkuAction.
func (stuo *SkuTemplateUpdateOne) SetAction(s *SkuAction) *SkuTemplateUpdateOne {
	return stuo.SetActionID(s.ID)
}

// Mutation returns the SkuTemplateMutation object of the builder.
func (stuo *SkuTemplateUpdateOne) Mutation() *SkuTemplateMutation {
	return stuo.mutation
}

// ClearAction clears the "action" edge to type SkuAction.
func (stuo *SkuTemplateUpdateOne) ClearAction() *SkuTemplateUpdateOne {
	stuo.mutation.ClearAction()
	return stuo
}

// Save executes the query and returns the updated entity.
func (stuo *SkuTemplateUpdateOne) Save(ctx context.Context) (*SkuTemplate, error) {
	var (
		err  error
		node *SkuTemplate
	)
	stuo.defaults()
	if len(stuo.hooks) == 0 {
		node, err = stuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SkuTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			stuo.mutation = mutation
			node, err = stuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(stuo.hooks) - 1; i >= 0; i-- {
			mut = stuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *SkuTemplateUpdateOne) SaveX(ctx context.Context) *SkuTemplate {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *SkuTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *SkuTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stuo *SkuTemplateUpdateOne) defaults() {
	if _, ok := stuo.mutation.UpdateAt(); !ok {
		v := skutemplate.UpdateDefaultUpdateAt()
		stuo.mutation.SetUpdateAt(v)
	}
}

func (stuo *SkuTemplateUpdateOne) sqlSave(ctx context.Context) (_node *SkuTemplate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   skutemplate.Table,
			Columns: skutemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: skutemplate.FieldID,
			},
		},
	}
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SkuTemplate.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := stuo.mutation.Request(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skutemplate.FieldRequest,
		})
	}
	if value, ok := stuo.mutation.Response(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skutemplate.FieldResponse,
		})
	}
	if value, ok := stuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: skutemplate.FieldStatus,
		})
	}
	if value, ok := stuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: skutemplate.FieldStatus,
		})
	}
	if value, ok := stuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: skutemplate.FieldUpdateAt,
		})
	}
	if stuo.mutation.ActionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skutemplate.ActionTable,
			Columns: []string{skutemplate.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skuaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.ActionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skutemplate.ActionTable,
			Columns: []string{skutemplate.ActionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skuaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SkuTemplate{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{skutemplate.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
